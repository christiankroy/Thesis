%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: MolCel2013_FigS5.pdf
%%Creator: Adobe Acrobat 10.1.9
%%For: royc
%%CreationDate: 2014-04-5, 9:13 PM
%%BoundingBox: 0 0 307 254
%%HiResBoundingBox: 0 0 307 254
%%CropBox: 0 0 307 254
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 52861 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2014-03-28T15:56:18-04:00"
   xmp:ModifyDate="2014-03-28T15:56:18-04:00"
   xmp:CreateDate="2014-03-28T15:56:18-04:00"
   xmp:CreatorTool="Adobe Illustrator CS5.1"
   xmpMM:InstanceID="uuid:f141da8d-fea7-5649-a3e1-c6ad639fcb93"
   xmpMM:DocumentID="xmp.did:08801174072068118C14A945E5DB942B"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:Type="Document"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 9.90">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">MolCel2013_FigS5</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="244"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUk876jqWneUNXvNL/wCOnFay/UKAMfrDLxhorbN8ZGx69MVS/wAm6hd3tvqm&#xA;m3d5qy6taOqzjVY9NW5gE0dY3i+oRm1dTQla8twQfDFWJy6p51MU0ul61quq2dxqq6XY+nDpH1tk&#xA;tBKb6eEvbW9txMkRjX1Kj4S1fiFFU78u3HmvWptO1LTtYn/QkL/V9TtdRS1S9M9tJcxXUc0cFqqK&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:9efa0710-a85b-c642-b0bb-d20be206c660"
    stRef:documentID="xmp.did:08801174072068118C14F3235FA19F7F"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="default"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:D27F11740720681191099C3B601C4548"
       stEvt:when="2008-04-17T14:19:15+05:30"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T16:23:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T17:10:45-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:EF7F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T22:53:33-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F07F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T23:07:07-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:35:43-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:40:59-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:26:55-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FB7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FC7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:20-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FD7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:30:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FE7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:31:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B233668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T12:23:46-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B333668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:27:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B433668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:46:13-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:47:57-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:51:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:52:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T13:28:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FF7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T16:23:53-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:07C3BD25102DDD1181B594070CEB88D9"
       stEvt:when="2008-05-28T16:45:26-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F1174072068119098B097FDA39BEF"
       stEvt:when="2008-06-02T13:25:25-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BB1DBF8F242B6F84"
       stEvt:when="2008-06-09T14:58:36-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811ACAFB8DA80854E76"
       stEvt:when="2008-06-11T14:31:27-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:0180117407206811834383CD3A8D2303"
       stEvt:when="2008-06-11T22:37:35-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811818C85DF6A1A75C3"
       stEvt:when="2008-06-27T14:40:42-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:01801174072068118F62C262592E568B"
      stEvt:when="2012-01-04T09:22:07-05:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:02801174072068118F62C262592E568B"
      stEvt:when="2012-01-04T09:22:18-05:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:06801174072068118C14F3235FA19F7F"
      stEvt:when="2014-03-26T20:33:25-04:00"
      stEvt:softwareAgent="Adobe Illustrator CS5.1"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:07801174072068118C14F3235FA19F7F"
      stEvt:when="2014-03-26T20:33:35-04:00"
      stEvt:softwareAgent="Adobe Illustrator CS5.1"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:08801174072068118C14F3235FA19F7F"
      stEvt:when="2014-03-26T20:35:31-04:00"
      stEvt:softwareAgent="Adobe Illustrator CS5.1"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:08801174072068118C14A945E5DB942B"
      stEvt:when="2014-03-28T15:56:16-04:00"
      stEvt:softwareAgent="Adobe Illustrator CS5.1"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="4.263889"
    stDim:h="3.527778"
    stDim:unit="Inches"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="Palatino-Roman"
      stFnt:fontFamily="Palatino"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="7.0d4e6"
      stFnt:composite="False"
      stFnt:fontFileName="Palatino.ttc"/>
     <rdf:li
      stFnt:fontName="HelveticaNeue"
      stFnt:fontFamily="Helvetica Neue"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="8.0d6e1"
      stFnt:composite="False"
      stFnt:fontFileName="HelveticaNeue.dfont"/>
     <rdf:li
      stFnt:fontName="HelveticaNeue-Italic"
      stFnt:fontFamily="Helvetica Neue"
      stFnt:fontFace="Italic"
      stFnt:fontType="TrueType"
      stFnt:versionString="8.0d6e1"
      stFnt:composite="False"
      stFnt:fontFileName="HelveticaNeue.dfont"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Red"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Yellow"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Green"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Cyan"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Blue"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Magenta"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="14.999998"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000004"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000001"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="19.999998"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000000"
         xmpG:magenta="30.000002"
         xmpG:yellow="95.000000"
         xmpG:black="30.000002"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="45.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="70.000000"
         xmpG:magenta="14.999998"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="5.000001"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000004"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000004"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000002"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="19.999998"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="39.999996"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999996"
         xmpG:magenta="45.000000"
         xmpG:yellow="50.000000"
         xmpG:black="5.000001"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000004"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000000"
         xmpG:magenta="60.000004"
         xmpG:yellow="65.000000"
         xmpG:black="39.999996"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="39.999996"
         xmpG:yellow="65.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000002"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000004"
         xmpG:magenta="60.000004"
         xmpG:yellow="80.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999996"
         xmpG:magenta="65.000000"
         xmpG:yellow="90.000000"
         xmpG:black="35.000004"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999996"
         xmpG:magenta="70.000000"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="80.000000"
         xmpG:black="70.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=100 Y=20 K=0"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="CMYK"
         xmpG:cyan="80.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="20.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=35 Y=100 K=0"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="CMYK"
         xmpG:cyan="15.234401"
         xmpG:magenta="34.765602"
         xmpG:yellow="100.000000"
         xmpG:black="0.390600"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Grays"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="89.999405"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="79.998795"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="69.999702"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="59.999104"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="39.999401"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="29.998802"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="19.999701"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="9.999103"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="4.998803"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Brights"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000004"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.003099"
         xmpG:black="0.003099"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -254 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 254 li
307 254 li
307 0 li
cp
clp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
%ADOBeginSubsetFont: TKWPMX+Palatino-Roman Initial
ct_T42Dict begin
-0.465 -0.48 1.703 1.172
 256 array 0 1 255 {1 index exch /.notdef put} for  /TKWPMX+Palatino-Roman
Type42DictBegin
[<00010000000b000b000b000b63767420dec1ba6b000000bc000005986670
676d603e945f00000654000006fd676c7966ac87d48a00004dd400001698
68656164d8141f1500000d540000003668686561fa0e820f00000d8c0000
0024686d7478c39d441000000db000001b706c6f63610095626800002920
00001b746d6178700f36088900004494000000206e616d6526e870840000
44b40000036270726570feed8aee00004818000005bb6764697200000000
000000000000000005d10000058c001a0580000503a600220000ffe30000
ffe80000ffe3fdcefffc058d0043fe5c00000362000005ab000002340000
058d00000000000003510000000000000000000000000000ffffffffffff
ffffffffffffffffffffffffffffffffffff000000000000000000000000
00000000000000000000000000000000000000000000ffffffffffff00bc
000000bc0000000000000000000000000000000000000000000000000004
00050040000700050039000700c100c30072013200be0005008e00320043
001400680030005500c30223009e0011003a00a5005700d5000600880010
005b008100f80053009900ac00bd04010044008e00ef0042004a006c011f
0068008000a900d0004a00a400adff94007600b400c00031011a01290017
00afff6f0001002d008b00c30446ffcc0030ffec001200450051009100a1
00a901570000001d002a0031003100420052009500d600d600ef015a01d5
0282032bffb7000b001d0029000300330035003c003e0047006d00e00194
0391ffc0ffd5000500080041005b0063007f00a2ff4effb1004400260044
004a0073008f00a200ab00b000cc010b0159017b018501b7027c02d80375
03a404bd0516ffac00200037003b00450053005a0061006c0076008f0095
00b500bc00d500ec02d600fb001d003b003d005700650066007a008700a1
00a400ab00c600e100f0013201560166018102130233024a0264028a02bb
0313032e03a903c605e9ff4affaa00000008000a0026002800550055006b
00c700d100da013d014a019801e30247038005a6ff2dffe6ffea000a0017
0020002500470049004e00580076008f00950099009900a500b600bb00d0
00e600fe01040117011d011e018f019301b201e201ec01f90202023502f7
035e0387038f03a603bc03d403d6043a045e04fb052c0584058e059a05c6
fef0ff21ff7f0021005a005a0068006e0085008a008c008c009c00a600b4
00cf00d900df00e800ec00fa01000106010c0115012a013901690201042c
0497052a05ca06bf0800fdcdfee2ff1500030005000a000c001d00220024
002e0046004a00510057005c005c005e006a006c00770079007d007f0081
0086008b008f009500b100b300bb00be00bf00c500c600cb00d100d800da
00db00df00e200ea00eb00fe0104010a010a012d013401360139013b0144
014b014f0153016101670168017d01a901b601b701ba01bd01d201de01df
01f102240233025e02680275027502ae02dd032d034503510367038e040a
041304a204f0050005b506190620066206cd0737077d07c4fca7fe6efec8
fee9ff00ff6effe90009000900230027002a002b004e005c00660068006a
007800800080008500890092009a009c00b400b600b800bf00c500d100dc
00ef00f801080116011701380138014b0157016301670168018801920193
019b019e01ae01b301c201cf01df01e801f401f501f9020b02270227023f
0247026e0278028e02a402c102d002f502f70305030d030f031e033a033d
03590388039503df045a0543060106420708070c074b076300bb00c800ba
00000000000000000000000000000149010e0379005b00dc00e3039400b6
0249020f04e0014c001a0104035e00ae0221022900c501d6027c02c7057e
017d0039015c034602480432039e01fe0071007001c8014001920115017e
016c004502a500f303fd013302a8015001650235012403d3022903af00e8
001a031f007501420237feae01ec008f044602f202dd01c40046003000c5
01860083055000c100af00cc004b0047001a005300b2002800c300520095
00eb0267009500470168007300720083003f002302e10276005b01d90280
023600e6019c010500f201c700510490feac0099031c004c00a3006100e1
03a80410008000a2005a0457049304c7025701ac016c00510092030801bd
00d900390092001a008300bc064a021201810359015700820030002a002a
403231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716
1514131211100f0e0d0c0b0a090807060504030201002c4523466020b026
60b004262348482d2c452346236120b02661b004262348482d2c45234660
b0206120b04660b004262348482d2c4523462361b0206020b02661b02061
b004262348482d2c45234660b0406120b06660b004262348482d2c452346
2361b0406020b02661b04061b004262348482d2c0110203c003c2d2c2045
2320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d4423
5920b0042651582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b0054358b94000fff50a1bb94000fff10a592d
2c00b0054358b9001640000b1bb9001040000b592d2c2045b00043617d68
18b0004360442d2c45b04a234445b04923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00743b006430a2d2c2069b04061b0008b20b12cc08a8cb810
0062602b0c642364615c58b00361592d2c45b0112bb0472344b0477ae418
2d2cb801a65458b00943b801005458b9004aff80b14980444459592d2c8a
03458a8a87b0112bb0472344b0477ae4182d2cb002254661658a46b04060
8b482d2cb0022546608a46b040618c482d2c01182f2d2c20b0032545b049
234445b04a23444565234520b00325606a20b009234223688a6a606120b0
1a8ab000527921b21a4a40b9ffe0004a45208a54582321b03f1b23596144
1cb114008a5279b34940204945208a54582321b03f1b235961442d2cb005
4358b91ef138060b1bb9187e3b210b592d2cb0054358b9333326660b1bb9
2d412d410b592d2cb0054358b93d1e12fd0b1bb93b21187e0b592d2cb005
4358b93d1eed040b1bb93b21e7830b592d2cb0054358b93333d99b0b1bb9
2d41d2c00b592d2cb0054358b91ef1c7fb0b1bb9187ec4e00b592d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4569b00943608a10
3a2d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b0064365b00743
0b2d2c3eb02a2a2d2c352d2c76b04b23701020b04b4520b0005058b00161
593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423648bb8
2000621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621b
b200802f2b59b002602d2c0c6423648bb84000626023212d2cb400010000
0015b00826b00826b00826b008260f10161345683ab001162d2cb4000100
000015b00826b00826b00826b008260f1016134568653ab001162db80032
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
332c2020456944b001602db800342cb800332a212db800352c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db800362c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db800372c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db800382c2020456944b00160
2020457d691844b001602db800392cb800382a2db8003a2c4b20b0032653
58b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b0032653
582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b0032653582321b801408a8a1b8a235920b80003265358b0032545b80180
50582321b8018023211bb003254523212321591b2159442db8003b2c4b53
5845441b2121592db8003c2c4bb800095058b101018e59b801ff85b80044
1db9000900035f5e2db8003d2c2020456944b001602db8003e2cb8003d2a
212db8003f2c2046b003254652582359208a208a49648a204620686164b0
04254620686164525823658a592f20b00053586920b000545821b040591b
6920b000545821b0406559593a2db800402c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db800412c4b20b00326
50585158b080441bb04044591b21212045b0c05058b0c0441b2159592db8
00422c2020456944b001602020457d691844b001602db800432cb800422a
2db800442c4b20b003265358b0401bb000598a8a20b0032653582321b080
8a8a1b8a235920b0032653582321b800c08a8a1b8a235920b00326535823
21b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800
03265358b0032545b8018050582321b8018023211bb00325452321232159
1b2159442db800452c4b535845441b2121592d0000000001000000010000
00900de05f0f3cf50111080000000000a426b48000000000c9de200efc44
fc250da70963000000090001000100000000000100000695fdc800000ddd
fc44fd760da70001000000000000000000000000000006dc060001000000
000002000000020000000239008d02f8006804d9006f0400003906b80069
0639005c01aa007b02aa007902aa0079031d005604d900680200fff202aa
002d0200008804d901150400003e0400007d04000022040000220400000c
0400001d040000460400005e0400004004000034020000880200001504d9
002804d9004c04d90020038d005905fa002f0639002304e3001b05ac0047
0631001a04e300320473002c061b004006a8003102b2002f02aaffe805cf
003304e300250791002606a60031064a003104d50036064a00300558002d
0433003804e7002b0639001e05c70015080000170556001f055600170556
002402aa00a704d900e902aa005504d9006a0400000002aa00a404000052
046dffea038d005004e3005403d5003302aa00310473004704a800070254
002d01dfffbe047300210254002d0710002a04a8001c045e004404cf0024
047b004f0329002f0364004a029c002e04d3001a0485001e06ac001d0421
0024047300100400002402aa007704d9023302aa006804d9006806390023
0639002305ac004704e3003206a60031064a00310639001e040000520400
005204000052040000520400005204000052038d005003d5003303d50033
03d5003303d50033024c0029024cffe9024c0014024c001a04a8001c045e
0044045e0044045e0044045e0044045e004404d3001a04d3001a04d3001a
04d3001a04000045033300660400007f0400fff60400003804d9010c0506
004e0473002b05fa001605fa001607d5005202aa00a402aa001a0464002d
078d000006aa004905b400220464002c0464002c0464002c0400ffe5049c
003003f4001c05b4006c0696005c0464000c0231ff4202aa003002aa0014
0625004c0610002d04730028038d00670239009a04d900690464000a0400
00120464001b04e500220400006604000061080000df0200000006390023
06390023064a003107fc0048069e00350400ffff08000000040000730400
00390239002d0239002d0464000e03f4003b04730010055600170156fe29
05f4ffb202a6006202a6008104d7002a04dd002b04000046020000880239
002d04000039092700690639002304e300320639002304e3003204e30032
02b2002f02b2001402b2001a02b20022064a0031064a003106520000064a
00310639001e0639001e0639001e024c002902aa001402aafff702aa0011
02aa00300200009302aa007402aa0096030a002f0281008a02aa001404e3
00070254ffe9043300420364004a055600240400002404d902330631001a
045e004c055600170473001004d5004704cf002904d9004a04d900b00266
003b0266ffff026600010600001d0600002e060000180400000e061b0040
0473004702b2002f043300380364004a05ac0047038d005005ac0047038d
005004e30051063900230400005206390023040000520639002304000052
05ac0047038d005005ac0047038d00500631001a04e3005404e3003203d5
003304e3003203d5003304e3003203d5003304e3003203d5003304e30032
03d50033061b004004730047061b004004730047061b0040047300470473
004706a8003104a8000706a8003104a8000702b20010024cffd402b20011
024c000c02b2002f0254002d055c002f0433002d02aaffe801dfffab05cf
00330473002104e300250254002d04e300250254002d04e3002503a6002d
04e300250254002d06a6003104a8001c06a6003104a8001c06a6003104a8
001c04a8001c064a0031045e0044064a0031045e0044064a0031045e0044
0558002d0329002f0558002d0329002f0558002d0329002f043300420364
004a043300420364004a04e7002b029c002e04e7002b029c002e04e7002b
029c00190639001e04d3001a0639001e04d3001a0639001e04d3001a0639
001e04d3001a0639001e04d3001a0639001e04d3001a0800001706ac001d
055600170473001005560024040000240556002404000024043300420364
004a04e7002b029c002e04d9002c0000fce80000fce80000fc900000fc74
0000fc8d0000fcac0000fd640000fc960000fcf00000fc440000fc900000
fd2d0000fcf90000fd1b0000fc7b062500530631001a061b004004730047
04e300250254002d05cf00330473002106a6003104a8001c0558002d0329
002f02aa002d0473002102aa003106a6003104a8001c038d005003d50033
0710002a0329002f029c002e0485001e06ac001d0239002d0239002d0333
01240333012402aa001102aa00a402aa00a402aa001102aa00a402aa00a4
0000fc440000fcac0000fd110000fd110000fce80000fce80000fd330000
fd640000fc960000fcf00000fc900000fc900000fcac0000fcac0000fc74
0000fc8d0000fd330000fd330000fd3300000000000000000000000002aa
002d02000088062500530639002303f4001d03f4002f05b4006c05b40092
0464000a0464ff8c0231ff420231ffe004640012046400340464002f0464
002b0000000008df006607a6006605cf003302b2002f0564002f0816002f
0879002f05c70015087900150b2b00150ddd00150808002f0556001f0808
001f0aba001f04e3002505ac00470631001a079100260254002d04a8002d
06fc002d06d9002d0485001e06d9001e092d001e0b81001e0675002d0421
00240675002408c900240254002d038d005004e300540710002a02b2002f
024c00030239008d0b87001a0a31001a08e30054078d002506c200250433
002d09500031088500310687001c063900230400005202b20014024cffe7
064a0031045e00440639001e04d3001a0639001e04d3001a0639001e04d3
001a0639001e04d3001a0639001e04d3001a063900230400005206390023
04000052078d00000610002d061b00400473004705cf003304730021064a
0031045e0044064a0031045e00440b87001a0a31001a08e30054061b0040
06a6003104a8001c0639002304000052078d00000610002d06aa00490473
00280639002304000052063900230400005204e3003203d5003304e30032
03d5003302b2ffc7024cff9702b2002f024c0000064a0031045e0044064a
0031045e00440558002d032900090558002d0329002f0639001e04d3001a
0639001e04d3001a06a8003104a80007063900230400005204e3003203d5
0033064a0031045e0044064a0031045e0044064a0031045e0044064a0031
045e004405560017047300100400003902b2002f063900230400005204e3
001b046dffea04e3001b046dffea04e3001b046dffea05ac0047038d0050
0631001a04e300540631001a04e300540631001a04e300540631001a04e3
00540631001a04e3005404e3003203d5003304e3003203d5003304e30032
03d5003304e3003203d5003304e3003203d500330473002c02aa0031061b
00400473004706a8003104a8000706a8003104a8000706a8003104a80007
06a8003104a8000706a8003104a8000702b2fff80254ffcf02b2001a024c
ffed05cf00330473002105cf00330473002105cf00330473002104e30025
0254002d04e300250254ffe704e300250254ffe704e300250254ffea0791
00260710002a079100260710002a079100260710002a06a6003104a8001c
06a6003104a8001c06a6003104a8001c06a6003104a8001c064a0031045e
0044064a0031045e0044064a0031045e0044064a0031045e004404d50036
04cf002404d5003604cf00240558002d0329002f0558002d0329002f0558
002d0329002f0558002d0329002f043300420364004a043300420364004a
043300420364004a043300420364004a043300420364004a04e7002b029c
002e04e7002b029c002e04e7002b029c001904e7002b029c001c0639001e
04d3001a0639001e04d3001a0639001e04d3001a0639001e04d3001a0639
001e04d3001a05c700150485001e05c700150485001e0800001706ac001d
0800001706ac001d0800001706ac001d0800001706ac001d0800001706ac
001d0556001f042100240556001f04210024055600170473001005560024
040000240556002404000024055600240400002404a80007029c002206ac
001d0473001002aa003104e3003203d5003304e3003203d50033078d0000
0610002d079100260710002a0000fce80000fce80000fd110000fc960200
001502aa001a0200008806390023040000520400005202b20010024cffe0
024c00290639001e04d3001a042100240558002d0329002f01dfffbe0400
00520631001a04e3005403d50033043300380364004a0000fe5f0000fe78
00007fff00007fff00007fff04d9023309b2023301dfff4e063900230400
0052063900230400005206390023040000520639ff9e0400fe9806390023
040000520639002304000052063900230400005206390023040000520639
002304000052063900230400005206390023040000520639002304000052
04e3003203d5003304e3003203d5003304e3003203d5003304e3003203d5
003304e3fee703d5fe6a04e3003203d5003304e3003203d5003304e30032
03d5003302b2002f024c002902b2002f0254002d064a0031045e0044064a
0031045e0044064a0031045e0044064affad045efeb7064a0031045e0044
064a0031045e0044064a0031045e00440639001e04d3001a0639001e04d3
001a05560017047300100556001704730010055600170473001005560017
047300100200fff50200008b0200001802390090038d005c080003890800
03c5040001c5040001c4040001c402aafdb102aafdb002aafdc502aafdb3
02aafdbd02aafd6b0449003f0000000006000000061b004002b2003305cf
003304e3002504e3002506a600310558002a062a002704e7002704970081
0635003304e3005404730047047300220254002c02b9002c04a8000c0329
0036029c002e048b0041086700400b07002e08f9003c0810005007c20050
0630005005350031075c0031076600310535003107bc00310726003109b1
00310753003109de003107060031099100310495003102aa003104bc0031
04c30031051b0031072d00310733003104e9003106f800310725003106ec
00310809004a0614004a04f9002e061b002e02f5000f02aa004702b0fff3
023d002702f700310275002701bb002502bd003102f5000f018a0022015b
ffee02c5000f018a0022046d001f02f5000f02aa002202fc001e02d20022
020c00280230003401b6002302f5000502be000503eb0005028a000f02bc
000f0255000603d0002e042f0022027500270400003e02e6fff004000022
0400002503d9fff90400002004000046038d004004000040040000340400
002804000082040000290400001304000007040000110400003e04000047
040000400400003a028f002d028f000e028f001b028f0032028f0041028f
002f028f0027028f002d028f0054028f001c028f001e028f000e028f001b
028f0032028f0041028f002f028f0027028f001f028f001f028f001f01c2
005001c20025028f001f028f001f028f001f01c2005001c2002501230046
0133fffc028f003c028f005204100054067400540674001c067400540674
001c0674001e0674000e067400540674001b067400540674001e0674001b
06740041040000be040000be040000be040000be040000be040000be0400
00be040000be040000be040000be040000be040000be040000be040000be
040000be040000be0400000004e5ffe90625000b0473002e0400001e0400
001e0400001e0400001e0400001e0400001e0400001e0400ffec04000039
040000bf0437fff2058e0038058e00450400ffdf0400001805280033062e
005d08ee00290400008903cd008d038d005a0239008c0400000003660051
0593002906ac001601c00089035500a203d5006304d5009202d6008302d6
008304d500b202d600700800000004d901a2040000000800000004000000
0800000002ab000002000000015500000400000002000000019a000000ab
0000000000000000ff8602aa00dd02aa007402aa007402aa000802aaffee
02aafff802aa000002aa002602aa00850000ff7b02aa007e02aa00e502aa
ffc402aa001102aa007802aa007502aa007402aa001002aa001d02aafffa
02aa000c02aa003c02aa00940000ff8702aa008702aa00e802aaffc702aa
002402aa0082063900230639002304e8003304e3001c0441002904410029
0441000a05f2ffee04e3004904e3004904e3004904e3004907dc001c07dc
001c07dc001c04db008204db008206ac003306ac003306ac003306ac0033
05cf003305cf003305cf003305cf0033072a000005d5ffe40791002606a8
003306a80033064a00300681003304d5003305ac004705ac004704e70027
05640018056400180560003305600033056000330560003305f800300556
001f0556001f068100330612000e0626000e0612000e08a4004e08a4004e
0643000006fb003304e8003305920030063e005e08bd00330558ffef0618
000007b00033067d004c064a003005c700150424003302b2003302b2fff8
02aaffe8043300400593003005ff00330721000006da0000068100330842
000008f000330400005204000052047a004403c6003d0334004f0334004f
0334004f046a000003d5003303d5003303d5003303d500330696002e0696
002e0696002e0449003f0449003f0449003f038b005d038b005d050e004f
050e004f050e004f050e004f0431004f0431004f046b004f046b004f04ef
00000497000005df005604ab002f04ab002f047a00440516004f04cf0041
038d0050038d005003c600260435fff30435fff304b8001e04b8001e0435
fff30435fff3061a004403eb001203eb00120516004f0449000004490000
044900000732004f0732004f049c000005cd004f03d1004f0430006003e7
005b0681004f044d000004ba0037043000440364004a0254002b0254ffc4
01dfffc0060800000630002f056f0043056f00370516004f049200120492
001205ec0053047a0044047a00440485001e0324004f08e000f902f5005d
02f5005d0627002304db001c048b00330583003804d80049055600240696
00330658003002a9003305c6003306080023078f002606a60030058b0056
065800300681003304cc0033057c005d04e1002705de000605f80030054f
001f06f60025062700230627002306270023062700230627000906270023
062700230627002306270023082f0023082f0023082f0023082f0009082f
0023082f0023082f0023082f002306270023062700230627002306270023
082f00230565001005e10017060700170680000106b9000106b9000106cd
0001058c000105f000010729000b07ac001707d700170894000108bc0017
08d0001708e6001708ec000108ec000109ed00170a1800170ad500010afd
00170b1100170b2700170b2d00010b2d00010770000107de000108e90033
0345000b02a9003303b6001703e10017049e000104c6001704da001704f0
001704f6000104f6000102a9003302a90029037a000103e8000106f30042
06f3001706f3001708440001086c001707a2000107ce00170720001706c6
000105c3000106ad004205de000606ce0017081c000107ba001707880001
05de000605de000606d0000106b300010711004106ff001606ff00160850
00000878001607ae000007da001607c7000007c70000096f0016096f0016
0ac000000ae800160a1e00000a4a00160a3700000a370000072c001606d2
0000090b0046051e004404ab009204c1ffee042c004403da008e03fe0052
04b4fff80501008d026700c00490001904c100000481fffd044b007c0462
0044045e004403db004004d6004403df00410486001b05a90044049d0038
0587000a05f20035044f00400509001c05aa004406090044051e0044051e
0044051e0044051e0044051e0044051e0044051e0044051e0044051e0044
051e0044051e0044051e0044051e0044051e0044051e0044051e0044051e
0044051e0044051e0044051e0044051e0044051e0044051e0044051e0044
051e0044051e004403da008e03da008e03da008e03da008e03da008e03da
008e03da008e03da008e03da008e04b4fff804b4fff804b4fff804b4fff8
04b4fff804b4fff804b4fff804b4fff804b4fff804b4fff804b4fff804b4
fff804b4fff804b4fff804b4fff804b4fff804b4fff804b4fff804b4fff8
04b4fff804b4fff804b4fff804b4fff804b4fff8026700c0026700130267
00c002670085026700c0026700b5026700580267000d0267005702670034
026700080267002a026700240267ffd30267ffd30267ffd3026700330267
fffe0267ffe4046200440462004404620044046200440462004404620044
046200440462004404620044045e0044045e00440486001b0486001b0486
001b0486001b0486001b0486001b0486001b0486001b0486001b0486001b
0486001b0486001b0486001b0486001b0486001b0486001b0486001b0486
001b0486001b05f2003505f2003505f2003505f2003505f2003505f20035
05f2003505f2003505f2003505f2003505f2003505f2003505f2003505f2
003505f2003505f2003505f2003505f2003505f2003505f2003505f20035
05f2003505f2003505f20035055e004305720067071c0025050800460200
0014020000140200004b02aa012202aa011302aafff402aa000b02aa010a
02aa00f702aa010a02aa00fa02aa011002aa008502aa007802aa005502aa
00b002aa001c02aa002902aa005c02aa004502aafff402aafff402aafff4
02aa006402aa002506660030049c0044069e001e052000100400008b0000
ff930000ff560000ff6a0000fea40000ff77048a001903c6003d041b0043
049c004f03c6003c035b00440431002d04ab002f028400620284000b0431
004f03c6005305df005605080044049d005603c60054049d00560431004c
035b005103c60026049d00370464000b05df001903c6fff703c6fff803c6
0014048a0019048a0019048a0019048a0019048a0019048a0019048a0019
048a0019048a0019048a001905df000a05df000a041b0043041b0043041b
0043041b0043041b0043049c004f049c004f049c004f03c6003c03c6003c
03c6003c03c6003c03c6003c03c6003c03c6003c03c6003c03c6003c0431
002d0431002d0431002d0431002d0431002d04ab002f04ab002f02840062
0284fff30284fff20284000b0284ffe40284002302840062028400120284
00620284fff20431004f0431004f03c6005303c6005303c6005303c60053
03c6005303c600530508004405080044050800440508004405080044049d
0056049d0056049d0056049d0056049d0056049d0056049d0056049d0056
049d0056049d0056064a00470431004c0431004c0431004c0431004c035b
0051035b0051035b0051035b0051035b005103c6002603c6002604e20026
03c6002603c60026049d0037049d0037049d0037049d0037049d0037049d
0037049d0037049d0037049d0037049d003705df001905df001905df0019
05df001903c6fff803c6fff803c6fff803c6fff803c6001403c6001403c6
001403c6005404a40062026a0030018600660463002e02aa008706660030
06660030049c004406660030049c004406660030049c004406660030049c
0044069e001e05200010069e001e05200010069e001e05200010069e001e
05200010069e001e05200010058a003d069b0046052d00bb056b00820000
000000000084000000840000008400000084000000840000008400000084
000000840000008400000084000000840000008400000084000000840000
0084000000e0000000e00000012000000120000001200000012000000120
000001200000012000000260000002600000026000000260000002600000
026000000260000002600000026000000260000002600000026000000260
00000260000002600000026000000260000003d0000003d0000003d00000
03d0000003d0000003d0000004cc000004cc000004cc000004cc000004cc
000004cc000006c0000008e0000008e0000008e0000008e0000008e00000
08e0000008e0000008e0000008e0000008e0000008e0000008e0000008e0
000008e000000a5400000a5400000a5400000bf800000d1800000d180000
0f6c00000f6c000010600000106000001060000011400000114000001140
0000125800001258000012580000138c0000138c000014a8000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
169800001698000016980000169800001698000016980000169800001698
000016980000169800001698000016980000169800001698000016980000
1698000016980001000006dc00b4001000c2000700020010001300460000
07e806fd000400010000000c00960001000000000000006c000000010000
000000030015006c00010000000000040015008100010000000000060015
00960001000000000007003100ab000300010409000000d800dc00030001
04090001002a01b40003000104090002000e01de0003000104090003002a
01ec0003000104090004002a02160003000104090006002a024000030001
040900070062026a436f7079726967687420a920313939312d39392c2032
303036204170706c6520436f6d70757465722c20496e632e20436f707972
6967687420a920313939312d3932205479706520536f6c7574696f6e732c
20496e632e20416c6c207269676874732072657365727665642e4c554c57
4d452b50616c6174696e6f2d526f6d616e4c554c574d452b50616c617469
6e6f2d526f6d616e4c554c574d452b50616c6174696e6f2d526f6d616e50
616c6174696e6f206973206120726567697374657265642074726164656d
61726b206f66204c696e6f747970652041470043006f0070007900720069
006700680074002000a900200031003900390031002d00390039002c0020
00320030003000360020004100700070006c006500200043006f006d0070
0075007400650072002c00200049006e0063002e00200043006f00700079
00720069006700680074002000a900200031003900390031002d00390032
0020005400790070006500200053006f006c007500740069006f006e0073
002c00200049006e0063002e00200041006c006c00200072006900670068
00740073002000720065007300650072007600650064002e004c0055004c
0057004d0045002b00500061006c006100740069006e006f002d0052006f
006d0061006e0052006500670075006c00610072004c0055004c0057004d
0045002b00500061006c006100740069006e006f002d0052006f006d0061
006e004c0055004c0057004d0045002b00500061006c006100740069006e
006f002d0052006f006d0061006e004c0055004c0057004d0045002b0050
0061006c006100740069006e006f002d0052006f006d0061006e00500061
006c006100740069006e006f002000690073002000610020007200650067
0069007300740065007200650064002000740072006100640065006d0061
0072006b0020006f00660020004c0069006e006f00740079007000650020
004100470000b8003c2bb800322bb802bab26e231fb802c0b273321fb802
bfb26e241fbd02b502b30014001f02b402b3b2141fdfb802b3b401040213
1fb802a4b7d21f1fc360311f00ba01bc0001028eb27c181f410902900285
0018001f028f02840018001f028ab2cb181fb80288b2a6181fb802864039
761a1f2fa63fa64fa65fa66fa67fa68fa69fa6afa6bfa60a3f76af76bf76
c0f1041f7c2f7c3f7c03ff7c012f7c3f7c4f7c5f7c5fcba0cb0610411c02
850001000f0284001f0284004f02850050028500cf028400050000028500
4f0284006f0284008f02850090028500a002850006009d0155b2071fb1b8
0184b2031f67b801afb2081fc1bc0123000d001f0142017bb6051f95d707
1fd7bc01b2004f001f010b0108b20d1fd7bc01b2004f001f013501b2b40d
1f110840411d0233021200d9000d020100d9000d01e500d9000d01a900d9
000d019e00d9000d017000d9000d016700d9000d015d00d9000d015b00d9
000d0139400bd90dc4d90d8cd90d78d90db8012f400b5d0def5d0dc65d0d
795d0d4113020c00a2000d01bd00a2000d01a500a2000d018600a2000d01
6800a2000d013000a2000d011c401aa20de9a20dc8a20d70a20d69a20de3
5a0de15a0d635a0d575a0db8012cb20f0009410901f700600801001f01f3
0089019a001f01f2b2d2891fbc01ee0084019a001f01a2b286721fb8019f
b286cd1f4115019d00860801001f019c0086019a001f019b00600401001f
019a00600801001f0197007a0401001f0193b284891fbc018d0084012500
1f018cb284e41fb8018ab277cd1fbc018400640125001f0161b2d2891fb8
015fb284ab1fb8015eb284cd1fbc015a0068019a001f0138b2862d1f4111
0134008902ab001f012d006802ab001f012b00640156001f012a00640201
001f011bb286cd1fb80118400977bb1ffe86791ffcd2b80401b21ffbd2b8
0125b21ff884b80156b61ff677241ff568b80401b21ff464b80156b21fec
89b80201400b1feb84621fea84891fe777b80801b21fe464b80401400f1f
d1d2e41fd084891fcf849e1fc577b8019a40171fbd86811fbc779e1fb864
931fb764811faa84621fa864b80801b21fa1d2b80401b21f9e68b80201b2
1f92d2b80201b61f8b84cd1f8764b80125b21f7f64b80801400b1f7e8643
1f7d84931f7584b80801b21f7477b8019ab21f6f68b80401b41fd260191f
b80191b260181fb8028b401760291f6857281f86603c1f7a6e2f1f6d64e4
1f5e84931fb802874010a92d1fa977281f9f77af77bf7703896eb8010040
271f6e603b1fd06001606e1e1f306e406e506e03606e706e806e906e0455
180918099f029f030290be02130007009001ed00070090013d40430790e6
0790da07909007908f07908207906a07906207905f07905c072408220820
081e081c081a08180816081408120810080e080c080a0808080608040802
08000814b8ffe04032000001001416000001001606100000010006040000
01000410000001001002000001000200000001000002010802004a003041
0b023300400233005002330003008002330090023300020173744bb0c063
004b6220b0fb5323b80105515ab005234218b9000101ff858d16763f183f
123e113946443e113946443e113946443e113946443e11394660443e1139
46443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b73014b5079bc001f01980007001f0194b6071fe8
071f8d072b2b2b2b4b5379bc00900198000700900194b60790e807908d07
2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d5974752b742b2b
742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00456953424b5058b1080042592b
2b2b2b2b2b2b2b2b2b73747573747573732b2b2b2b2b2b752b2b2b742b2b
2b2b2b0000>
[5785 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 3 <> TKWPMX+Palatino-Roman AddT42Char 
1 132 15 <0001fff2fecf018e0105000c0024bb000c029f000802a2b30805ad09b802
a1b4000c0b000d10d4d83910f4f439003ff43130033e0137363f01363717
020f010e4c4012090f6c164a1a7cb255fee87e8b4422721b071a1cfedfd2
2700>TKWPMX+Palatino-Roman AddT42Char 
1 224 17 <00010088fff6017700e5000b0011b700ad060a03ad090c10d6fd003fed31
30253216151406232226353436010032454631324646e546323146463132
46000000>TKWPMX+Palatino-Roman AddT42Char 
1 288 24 <0001001dffe303ae0577003a009440332a0e4c0e54320353326506643275
06743282358c3a91359c3a092d300f1430ea0f490f381d295827b32bfc1f
73211d04040008b8012d4024380b2db32b17561c71401321201401144714
34030040042103342456220cd2003401343c10d65dedd4e410d61ac81ac0
111239762f5d181ac81af4e4dde4003fedc0c43f3cf4fde4e4111239762f
18edc41112393130005d015d37262f01371e0233323e0135342623220706
072737363d013427262737163332371706151417072621220706033e0133
321e011514070621222684170e42315a2a924c649753bd814c3e2f41290c
020502010da3b398d40507020a8bfeeb665b0f0550804e74c16876b2fed4
425d164424a31da4273454a776aea81d17470cf73823b250501f130a0c0c
0a332914310609038afeea3a2d63ba6fad95e217>TKWPMX+Palatino-Roman AddT42Char 
1 608 41 <0001002c00000434058f0047009d40276a236a247a237a248c238c24fb23
fb24080b230b2402247f207f22562300210121210b180c7f0bb802894037
0947491373182d60395d015d3f5644564176480b0b1a11181aa92d582b48
2b3200135811a909580358060057010234573a573758353908003f3ce4ed
ed3fedc4e4e4fde4111239762f18e4fdc41112392f0110f4e4e4e4e4fd3c
e41076d418f4ed1112392f5d3ce4eded313000715d133516333224333216
1706072326272e012322070607060715163332373e013f01330717232726
272627262322071514171e02171526232207353e0137363736131134272e
022c986a4b01844449793119073f0910349965656c0602010470567f4c1d
110a083f07073f070b05081e39c9474b04021734767f7e71d976340a0c03
010303031733054d400608030455da794112110c362f1bcade030d051749
3ee4f5406d080e070d04ca88815f2411024008084002110f144d15010701
cf88825f23110000>TKWPMX+Palatino-Roman AddT42Char 
1 976 47 <000100250000049e058d00300066b2277f2ab80289400b282832091b5620
561e6000b8025c4029115d07560c562f097f098f09030976311657105713
5815110201200024205822a9282a582f582e0008003fc4e4e4c4fde4c411
12393f3ce4eded0110f45de4e4e4e4fde4e41112392fe4ed313033353637
3637363736351134272e02273516333237150e0107060706031114171633
2037363f013306070607062325227f3e110a040903040303173377f43a40
df77330a0c030103047270011a710d0a284316152918346cfdb060341d11
090e1c5c891a021a88825f2311024008084002110f144d14fef8fd606942
07241e27a695c90802030800>TKWPMX+Palatino-Roman AddT42Char 
1 1228 53 <0001002d0000054e058f004d01104057940a940b020309030a191e191f23
1f2c283511351235233a2849285d2c6710671167236e2c74117412791f79
207f2c80118012801380148f2c9111911291139114a411a512a521a422b3
09b30ab511b720da0ee70e281eb8028db71013141013134710b8028d4060
241e1424241e241e13101e101a243f24012424330c2a860c2f1a011a4f3a
5d36562f563360005d3f5d45564a562f470147764e1319101040242c1f27
4f27b0270327273f012f732d680057045808010219573a5740573d581c58
1e3b3f031a08003f173ce4e4ededed3fc4e4edfde41112392f5d1ad81ac0
1112390110f45de4e4e4e4fde4e4e410d45dd4ed1112392f5d1112393911
390709102b76d407052b3130015d005d1335161f0132373633321e011514
0e0107161713161716171633152623220726272627262737163332363534
26232207060706031114171e02171526232207353e013736373613113427
2e022d2750c039789c19bfaf605aab89195dfc6c1209090f334c393b5641
995541695f0a341bb6bca2a467630402010604021734768e7760e376340a
0c03010303031733054d40010205040644995a54a66e1e2379feb48b1007
03054006064bda7951866d1e03ac8d7b911f362f0efeebfe4488815f2411
024008084002110f144d15010701cf88825f2311>TKWPMX+Palatino-Roman AddT42Char 
1 1728 54 <00010038ffe303f805aa0039017640d567067606781877338c0a8c0b832c
832d080302030306050306081413363905332543255812582e5a2f68140d
0b0006110612031d061e062f170a270a360a39143d153d16343234335202
5203573257336b196b2a8405840682138214822d843184328433930b9711
91309336aa14aa15b50eb812b813b532b533c711ca14ca15e812f002f003
f505f006f91330353830171b120c182b180c08112b2f289b08ab08bb08cb
08db08eb08069428a428b428c428d428e42806121111602f30142f2f302f
302f301111121112302f352b11120c17227f21b8028940131e1e850c010c
d19f35af350235353b17037f02b80289401300008a2b012bd117a63a1112
1b082f3038281eb8fff4b6000c001e381b21b80102400928681b03020868
3809003fedc43feded11123939383811123939111239390110f6fd5d392f
f4ed1112392f5dfd5d397c2f18f4ed1112393911123939070910d9c00709
102b10c000717111123911123938381112391112393130005d71015d3736
37331e0333323e0135342e01272e01272e0235343e01333216170e010723
2627262726232206151416171e01171e0215140021224110034405175894
4565aa4e27503b25de4e68623d7bf18d55c9570e0c03440306192b677091
ad3e5037fa645e5a3afeb6fefac63160d792353c2f5d975642603b0c061c
1120568c5176d1742d2b3f6d6a9a0e241d3ab18d555d1c1321131c4d7d54
c7fed800>TKWPMX+Palatino-Roman AddT42Char 
1 2272 68 <00020052ffef03cf03c20033004100ac4031060b0c404940692c7625792c
7637763884258a2c9b2ce425e426e4270e09251925021c562a1d416e180e
56201030100210b802854015434000217f018f019f010301013b7a202330
230223b8028e402a4200402a411d34212a1d2a0920052e152e252e352e45
2e05f42e012e830907175a1c1a58180a3e84200b003fed3fe43ced3fed5d
71111239392f1acd10c9101acc0110f65dfd392f5d1ac91a10fc5de4c4fd
3c3ce4313000715d13273635342736373633321617161507111417161716
1f011526232207370e0123222635343e0137362437362e012322060f0106
050e010706070615141633323637d93501017f513e4d729c261a0408060d
0a2041523e3c6405cc4c3a79872f42223a010580013072523b590a121b01
be82b82617111a524943834102ad0e17282a19531d1556503861b7fed630
150f07060206390707b09a27816b457243101b3e0f5f6a44200b243cbf16
361d1122323d4a534d4d0000>TKWPMX+Palatino-Roman AddT42Char 
1 2644 71 <00020054fff004a305cc002e003f00e540740041b916bb17b93be61de537
06293b293c34203421343744374438533753387a237c30882383279327a4
27b427c916c923c427c934c93cd816d327d637d638d83ce527ea30e638fc
1c1e3b2115181518151e0113562a5628152f6e0e6b05b30f090100092009
5009600970099009a009c0090809b80290401041367a0f1e4f1e02201e30
1eef1e031eb8028e400c403d2f393215281a25005a01b8012c4011040032
8325070e5a1258130f0a39841a0b003fed3f3ce4ed3fed3ff5ed11123939
111239390110f65d71ed10fc5d71e4e4fd3c3ce4e4cc11123907101ac831
30005d015d01353e013717060f0111141e0217152623220736370e010706
23222e01353436373e0233321617113427262726132e0123220e01151416
33323e0137363502a76f99490d04050407122a687a322b85030228872650
3d71be673f301bc077463f79390c040b142f449548528a49b680436a500b
08054e390c21180955f3a0fd8e66951d120936070745751d74251470d585
64b3311c72331f2001078b1e0b0509fd8c4b4554aa77b7ce386c422cad00
>TKWPMX+Palatino-Roman AddT42Char 
1 3064 72 <00020033ffe8039103c800240032008340579a2ed409d50eeb08e60de60e
06451f501f631ff93104061e01181d252b25871c1d1d2130306412070040
242101100109211a212a213a214a21052183060b00a42d7a18564f166f16
af160316cb34251d7a200a010a7c3310f65dfdc410fe5de4ede4003fed71
3dd438181ac81a393fed1112392f3cfdc4111239313001715d005d250706
070e0123222e01353436373e01373633321e0115140706070623211e0233
323637011617163332373635342623220603742045202f794384d6773f28
1d7a3c4f5c70b5540448396c6cfebf025fa75a3d7959fd8f1c4e9538852a
01806b718a9b482b0e151d6edb9373b92c2053182166b06f1c280e04088f
b1542734018803030505180d9e94a2000000>TKWPMX+Palatino-Roman AddT42Char 
1 3352 74 <00030047fdca045c03c9003a0047005e01414099662566266c286c297b28
7b29733d73538b288b29853d961c962093539357ab25cb25db25ec25f654
14065401092f09301a2f1a302b202b21292f29303b203b216035603d6b44
6046605360547d437d44ab0cac0dab2dbd0db325bd2dcc0dcc2ddd0ddd2d
1c485b5e4f4c25035527154a0d12162e3f0b010300252a324f52273b4c2e
120d0c051039594200011a0b642f3f013f3f4a3603e700b80187b6456436
07165615b8015f400d5d204a304a024a0b55641e0f60b801a0b306597a1a
b80131b30603f301b80136b2427a06b80221401432527a22f33210aa2af3
3b7a003220320232495fba012e012400182b4e10f44d5dedf4ed10f4ed10
fdedf4e410f4ed10e6003fed3f5d3cfde43fedf4ed1112392f5ded011112
391112391217391139123911123900111239111239123939111239121739
10e63130015d00715d01170607231615140e010706270607061514161716
3337321e011514060423222e013534363736372e0135343736372e023534
3e01333216173605141e0133323635342623220601220706070607060706
15141633323e01352e022726045408270cba174f9856385f41110b1d1e2d
73d871753887fef6a58ac25d1b207a35532f1e31695a613668f669447b37
bcfd333567425684845d61760125952613184f050a0c15a38f6aaf590321
2f29180375133b163b344c9167120c02341a12151825070c043b794c67d5
7b56904f2c4d2c382a1b30181458294b1943734566a1652c2c01de478644
6f7b7e957bfcf004031138060a1f3839699155934a4042260c03>TKWPMX+Palatino-Roman AddT42Char 
1 3948 76 <0002002d000002260580000b002f005e401060067006800690060406fe00
040c5a0db8018740170f071c5a225a1f58211d0a09fe035610561d6b0f31
0131b80285400b126e0c6b216b28562c562ab90284003010f4e4e4e4e4fd
e45de4e4f4ed003f3ce4eded3ff4ed3fed5d313001321615140623222635
34360335363717061d01121716171e01171617152623220735373e013736
3734133534272e0101212f41422e2f4242c5c28416080501010a05101006
69985b50b65f1517060b03060a061f0580422f2e42422e2f42fdb739163e
10d571b6fefc153217090d0401023907073901010d0a14330d0112b0951c
0f0f0000>TKWPMX+Palatino-Roman AddT42Char 
1 4192 79 <0001002d0000022405d2002e004fb30f300130b8028540142b6b1bb32356
216e07560c56126b006b60090109b80284b32f125a13b8012c400b16002a
5a015a2d582b000a003f3ce4eded3ff4ed0110f45de4ede4e4fde4e4e4e4
5d31303335373e0137363736131134272627262726233536373633321615
140f01060f0111121716171e0117161715262322335e1617060b02010606
0407050b0f7be2580d07070802010501020501010b041010076888676239
01010d0a14330d0112019fa7b2780e0a04073b1c2a060908070d21b37e9c
fdf9fefc153217090d0401023908>TKWPMX+Palatino-Roman AddT42Char 
1 4416 82 <00020044ffe1041a03c7000f001d00b74057b602bc09b512ba19c502cc09
c312cb19d901da04d60ee504e80cec0df907fb09f915f916f51c13041a01
9512a408a412aa19e411e6160649081b64030714640a0b177a0006200630
060306cb1f107a2000300002007c1e10f45ded10f65ded003fed3fed3130
43794038011d082612260e0f0d0f0c0f030619261509175f01130b105f00
1a04175f011c02105f001607145f00110f145f0018051b5f011d011b5f01
2b2b2b2b012b2b2b2b2b2a2b2b81005d01715d13340033320015140e0123
222e01272637141e0133323635342e0123220644011ddfd2010888f89574
a1641a2ebd529b5b749c5d90577b9901cce0011bfef8d192f2894e763e6d
c67bfe75b8bf9fe75fb2>TKWPMX+Palatino-Roman AddT42Char 
1 4696 85 <0001002f0000030003c3003c008540230b280b290b2aa41fa420a421d628
d629fb28fb290a2b282b29022838161d3823115a12b80187402c17562c7a
2307385a015a3b5839000a402921285626263e0a3832561a561d306e116b
006b08560d565f0a010ab90284003d10f45de4e4e4e4fd3ce4e4cc111239
2ff41ac81a003f3ce4eded3fedf4f4ed111239111239313000715d333536
373e01373637123d0134272e02073536373633321615140706073e01373e
0133321f010607232e012322061d0114171e02171617152623222f710911
11050a020603020d2172ca5d140707080105012d4c111e4e2a2a29060f02
2d173d2e4d6c0501080d0f1e84b07c80390202030d0c1731010b0c77505c
3b160b01391c2d0a0a0a07093d8034660f1a1f120e8565302c7f7f6742af
3e220f0509093907>TKWPMX+Palatino-Roman AddT42Char 
1 5004 87 <0001002efff2028c04fb003100834021ea29012e272e282e293d273d283d
294d274d284d29092820400121000805030707b80254402803124700582f
f60a581003061f1c8420250b112020332e08b30a1756166e000556032a56
5f2e012eb90284003210f45de43ce4ccfde43ce41112392fc4003fc8fdc0
3f3ce4fde476c41810f411123939101ac81a0138313001715d1335363734
27363717060316333237363717072623220703061e02173236371706070e
0123222e0227363736351123222e643b066841180b0d5010095e341a0715
3f35355e06030a1c2d362933270c2f2c26422b353f342205010301293203
102a261eee4224291453fee501020103075d0101fe69953a2b1a07070e27
25280e09182b424744511013019f>TKWPMX+Palatino-Roman AddT42Char 
1 5288 88 <0001001affea049f03c4006200d840481708170914371438143927112712
2713243724382439c409c40ac437c4380f0c380c390c3a2208263a2064bb
37ed1008111811071438380707090709383d3509074e05224a5a234bb801
874044274e07005a035805010a35840e0b09170738313f0f4b014b6b0558
073d5642563f6e016b52b35c560f5a01205a6f5aaf5ae05aff5a055a642b
b3316e1a561456236b0017b90284006310f45dece4e4fde410d45d71e4e4
ecfde4e43ce4e45d111239111239003fed3f3ce4ed3fc4f4c4fdc4111239
391139390709101ac901111239383130015d005d25152623220736370607
06070e01232226272e013534363d01342726272627262322273536373633
32161514070607061d01141e013332363736373e0137363d013427262726
2726232227353637363332161514070607061d0117161716171e01171604
9f83434a4c06033c5313122b563c516d271d1f0503020704090f263720d7
611009070901040306215f46305f261c1d160e020503020704090f263720
d7611009070901030406020301010a051010063939070751653053130918
152c2d21694a233e1eab1a6942140a060a01391835090a0a080c205ba739
c37a633b211f17271d1f1e5857541a6942140a060a01391835090a0a080c
205fa339898b79153217090d04010000>TKWPMX+Palatino-Roman AddT42Char 
1 0 0 <0002010000000500050000030007005bb10504b80128b2000607bb012800
02000101d0400b0303000a0947474a020605b80128b60303027b000704b8
0128b401004908d5b901dd00182b4e10f43c4df53c10fd3c10f53c4e1045
6544e6003f3c4d10fd3cf53c10f53c3130211121112521112101000400fc
2003c0fc400500fb002004c0>TKWPMX+Palatino-Roman AddT42Char 
TKWPMX+Palatino-Roman /CharStrings get begin
/space 3 def
/comma 15 def
/period 17 def
/five 24 def
/F 41 def
/L 47 def
/R 53 def
/S 54 def
/a 68 def
/d 71 def
/e 72 def
/g 74 def
/i 76 def
/l 79 def
/o 82 def
/r 85 def
/t 87 def
/u 88 def
end
TKWPMX+Palatino-Roman /Encoding get
dup 32 /space put
dup 44 /comma put
dup 46 /period put
dup 53 /five put
dup 70 /F put
dup 76 /L put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
pop
end
%ADOEndSubsetFont
/ZDWBNH+Palatino-Roman /TKWPMX+Palatino-Roman findfont ct_VMDictPut/ZDWBNH+Palatino-Roman*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 6{/.notdef}rp /five 16{/.notdef}rp /F 5{/.notdef}rp /L 5{/.notdef}rp /R /S 13{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r /.notdef /t /u 138{/.notdef}rp]ZDWBNH+Palatino-Roman nfZDWBNH+Palatino-Roman*1 [7.9792 0 0 -7.9792 0 0 ]msf31.9438 19.2368 mo(Li et al., Figure S5, Related to Figure 5.)[4.93907 2.32195 1.9948 3.93378 2.60125 1.9948 4.18908 2.32195 1.83522 1.9948 1.9948 4.36462 2.29003 4.72369 5.01092 3.26353 3.82207 1.9948 4.28478 3.82204 1.9948 1.9948 5.3301 3.86993 2.39376 3.93375 2.68903 3.91782 4.87523 1.9948 2.64114 4.35669 1.9948 4.35663 2.29004 4.72369 5.01091 3.26352 3.82207 1.9948 3.838 0 ]xsh.75 lw
0 lc
0 lj
1 ml
[5 2 ] 0 dsh
true sadj
40.4551 105.354 mo
283.99 105.354 li
0 0 0 .5 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.074
 256 array 0 1 255 {1 index exch /.notdef put} for  /KEGQMX+HelveticaNeue
Type42DictBegin
[<00010000000c000c000c000c4f532f32c8d7d058000000cc000000606376
7420001400140000012c000000046670676dfdfac9ac0000013000000428
676c7966e67b2ff00000545c0000228c68656164e3efa789000005580000
003668686561e20bc5040000059000000024686d7478237b760f000005b4
000021606c6f63610118a51c00002714000021646d6178700a8304e20000
4878000000206e616d65cd399ba20000489800000bb87072657028001e81
000054500000000c67646972000000000000000000000000000201bf0190
0005000000cc00cc0000011e00cc00cc0000011e003200fa000002000503
000000020004800000670000000000000000000000004c494e4f00000008
fb0203b8ff29003703b800d50000000000000000020502ca000000200002
00140014b800002c4bb800095058b101018e59b801ff85b844001db90009
00035f5e2db800012c2020456944b001602db800022cb800012a212db800
032c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800042c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800052c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800062c20
20456944b001602020457d691844b001602db800072cb800062a2db80008
2c4b20b003265358b0801bb040598a8a20b003265358b0022621b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b80003265358b003
2545b8014050582321b8014023211bb003254523212321591b2159442db8
00092c4b535845441b2121592db8000a2c4bb800095058b101018e59b801
ff85b800441db9000900035f5e2db8000b2c2020456944b001602db8000c
2cb8000b2a212db8000d2c2046b003254652582359208a208a49648a2046
20686164b004254620686164525823658a592f20b00053586920b0005458
21b040591b6920b000545821b0406559593a2db8000e2c2046b004254652
58238a592046206a6164b0042546206a61645258238a592ffd2db8000f2c
4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b
2159592db800102c2020456944b001602020457d691844b001602db80011
2cb800102a2db800122c4b20b003265358b0801bb040598a8a20b0032653
582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0
032653582321b801408a8a1b8a235920b80003265358b0032545b8018050
582321b8018023211bb003254523212321591b2159442db800132c4b5358
45441b2121592db800142c4bb800095058b101018e59b801ff85b800441d
b9000900035f5e2db800152c2020456944b001602db800162cb800152a21
2db800172c2046b003254652582359208a208a49648a204620686164b004
254620686164525823658a592f20b00053586920b000545821b040591b69
20b000545821b0406559593a2db800182c2046b00425465258238a592046
206a6164b0042546206a61645258238a592ffd2db800192c4b20b0032650
585158b080441bb04044591b21212045b0c05058b0c0441b2159592db800
1a2c2020456944b001602020457d691844b001602db8001b2cb8001a2a2d
b8001c2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a
8a1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8001d2c4b535845441b2121592d00010000000100007db83d6b
5f0f3cf5011103e800000000b643600000000000cb98044efc49fe1f05a6
04350000000900020001000000000001000003b8ff2b001c05dcfc49fe80
05a600010000000000000000000000000000085801f40033000000000116
000001160000000000000116000001160000000000000103004a01aa006d
022c0022022c001903e8005c02760021011600690103002f0103fff70160
001802580030011600530185003201160053014dffef022c002a022c0057
022c0018022c001d022c001c022c0023022c0026022c0032022c0028022c
002201160053011600530258002e025800300258002e022c00360320002a
0288fffa02ad004e02d2002b02c0004e0263004e023e004e02f7002b02d2
004e0103005202070016029b004e022c004e0367005002d2004d02f80026
0288004e02f8002602ad004e02880025023e000202d2004a02630000039e
000c02630000028800020263001601030048014dffef0103000002580032
01f4000000deffea02190024025100430219002402510024021900240128
000c023e0024022c004000de004500defff30207004500de004503550040
022c0040023e00240251004302510024014d003d01f4001f013b0009022c
004001f4000e02f600110206000901f4000801e00016014d003000de004d
014d0018025800450288fffa0288fffa02d2002b0263004e02d2004d02f8
002602d2004a021900240219002402190024021900240219002402190024
021900240219002402190024021900240219002400de003200deffea00de
ffda00deffe5022c0040023e0024023e0024023e0024023e0024023e0024
022c0040022c0040022c0040022c0040022c002a01900038022c002e022c
002f022c002301f4004802580030022c0040032000180320001803de0040
00de003200deffe502580030039efffa02f8002502e8001a025800300258
003002580030022c0000022c0040021600230240000002ee004e026e001e
01570000017a00190180001902e4003203660024023e0022022c00440103
004a0258003002180000022c0003025800240288fff901cf003201cf0041
03e8006f011600000288fffa0288fffa02f8002604320026037b002401f4
000003e8008201aa004201aa004201160054011600530258003002580056
01f400080288000200a7ff5b022c000d01030032010300390206000c0206
000c022c002a0116004b0116005301aa0042047c00480288fffa0263004e
0288fffa0263004e0263004e010300450103ffed0103fff80103fffd02f8
002602f800260316003302f8002602d2004a02d2004a02d2004a00de0045
00deffda00deffc700deffc600deffd400de004200deffff00de000500de
ffd100de004c00deffda02e40032022c0019022c000000de000003420031
03420024014d0042025800470288004e00de004d02c00008034200240258
0030023e002402510043014d000e014d0004028800250288000202630016
01f4001f01f4000801e000160000ff0f0000ff570000feff0000feec0000
feeb0000fef90000ff670000ff0a0000ff240000fef60000feff0000ff2a
0000ff710000fea50000000000deffe000deffd802e70026032300260282
00240263001601e00016022300200263004e0263004e02ee000202260054
02ce002602880025010300520103fff7020700160451fff60464004e02ee
0001029b004e02da004e0263000102c8004e0288fffa02a3004e02ad004e
0226005402d900090263004e03f3fffd028e002502da004e02da004e029b
004e02bffff60367005002d2004e02f8002602c8004e0288004e02d2002b
023e0002026300010335001e0263000002d0004e0292002f041b004e0430
004e030a00020368004e028d004e02ce002603fc004e029f000002190024
023d0032021c004001a80042024d000302190024030f000001fa001e0236
004002360040020e00400233000002b0004002300040023e002402260040
025100430219002401cf000401f40008032000280206000902340040020b
002e03290040033f00400269000302c40040021600450219002103060040
0218000302190024021900240236ffeb01a800420219002401f4001f00de
004500deffe500defff3036f0000036c00400236ffeb020e004002360040
01f400080226004002da00000245fffc03a7003f02d9003202f80026023e
0024029b00000212000e02da000a023500000226005401a8004202630016
01d700140402fffd031d0000028e002501fa001e02ac004e021c0040029e
004e02270040031800020266000302e3004e0246004003f7004e03010040
02d2002b021900240288000201f400080288000201f4000802750000020e
000902a3002f0221002e0292002f020b002e0299004e022c004001030052
03f3fffd030f00000288fffa021900240288fffa02190024039efffa0366
00240263004e0219002402e700260223002003f3fffd030f0000028e0025
01fa001e02da004e0236004002da004e0236004002f80026023e002402f8
0026023e00240263000101f400080263000101f400080263000101f40008
0292002f020b002e036d004e02c40040040b00520288fffa0219002402d2
002b021900240263004e0219002402d2004d022c00400288002501f4001f
0263001601e000160263001601e000160288fff90288fff90288fff9039e
fff902d2002b02d2002b02d2002b02c0004e02c000080263004e0263004e
0263004e0263004e02f7002b02f7002b02f7002b02f7002b02d2004e02d2
004e0103ffe60103ffd90103ffd8010300520103002802070016029b004e
022c004e022c004e022c004e022c004e02d2004d02d2004d02f8002602f8
002602f8002602f8002502ad004e02ad004e02ad004e0288002502880025
02880025023e0002023e0002023e0002023e000202d2004a02d2004a02d2
004a02d2004a02d2004a02d2004a039e000c039e000c039e000c039e000c
028800020288000202190024021900240219002403660024021900240219
002402190024025100240256002402190024021900240219002402190024
023e0024023e0024023e0024023e0024022c00400231ffef00deffd400de
ffc600deffc600de001100defff200deffd9020700450202004000de0041
012e004500de003801560045022c0040022c004002970012023e0024023e
0024023e0024023e0022014d003d014d002d014d003001f4001f01f4001f
01f4001f013b0009013b0009013b0009013b0009022c0040022c0040022c
0040022c0040022c0040022c004002f6001102f6001102f6001102f60011
01f4000801f400080302005201b600450241000c031f000c031f000c00de
ffe900de003200deffd900deffd900de005000deffc600deffe400deffc5
00deffc500deffd300defffe00deffd000de004201160051011600530185
00320116004b00a7ff5a0342002e034200380342001b0342002b03420031
0342004c0288fffc022c004301f4004802f8002c022c004002d2004d0206
000c0206000c0185003203e80064022c003601720022017200190172001f
017200230172002b01720021017200220190002900fa00230190002900be
002600be00070172002a017200220172003b0172001f0172001d01720019
0172001f017200230172002b01720021017200220190002900fa00230190
002900be002600be0007034200230320001800de003000de001801160053
00f1005800f10058014cfffb028f00000116005302f2000b0361000b018a
000b0361000b034a000b0364000b00edffd00288fff902ad004e0228004e
0263004e0263001602d2004e02f8002601030052029b004e0265fff90367
005002d2004d023a002502f8002602cb004e0288004e0262002a023e0002
02880002030900260263ffff033b00470103fff702880002024b002401e5
001f022d004000ed0045020f003c024b00240234004301d1000e022a0024
01e5001f01b10026022d00400216002400ed0045020200400206000c01e4
000e01a90026023e0024023a003c020100240235002401c40003020f003c
02cc002001c1fff60296004002cf002400edffe5020f003c023e0024020f
003c02cf002400de004000de0053022c0000022c001e0000feb500d0ffee
0116000e022c002301f4001c022c00280000fea60000fe3e0000fe4f0000
fe6c0000feb50000feb50000feb50000feb50000fe430000fed10000fe9e
0000fe4f0000fe870000fe870000fe4d0000febc0000fe6c0000fe840000
fed10000fe580000fe580000fe4f0000fe4f0000fe3f0000fe4d0000fe3e
0000fe3f0000fe4d0000fe3e0000fe3e0000feb00000fe3e0000feb50000
fe4f0000fe510000fe9e000000000116000d022c004003410040014d0042
03410040014d0043014d0042020900280209002900fb00420193ffff0116
000b0116000b01f4000502d2000801f4000a022c004c022c004d022c004c
01f4003e024b001c024b001c02d2002b02d2001002370024029b0055029b
002f01f40020023e001c035e005302ba003e02f300280104005901af0059
0116005f0238001501f4001d00960028014d005e014d005f05620007029b
0074014300740219fffb020b005e020b005f02a2005e02a2005f014d002a
01430074014d002a01620050008b00000000000000000000000000000000
000000000000000000000000000001f4000003e800000116000003410000
014d00000116000000a70000022c00000069000001160000000000000000
00000000000000000000002c0000000f0000014dfffc01ae0059014d002a
014d00030219003802190038029b000f02630055022c00230379002702a4
001d0000feb70000feb70000feb70000feb70000fe6e0000fe730000fed3
0000fe700000fe810000fe7a0000fe760000fe7f0000fe3a0000feaa0000
fead0000fe710000fe720000fe4d0000fe530000fe6a0000fe6a0000fe6a
0000fe6b0000fe6b0000fe4f00a7002f0136002f0462003603f30036029b
004c01160062022c00620341006203b10062029b001903b1001904c70019
05dc001903b10062029b001503b1001504c70015022c004c02d2002c02d2
00510341004a00de004001bc0040029b004002d2004001f4000502d20005
03b00005048f000502d2004001f4000502d2000503b0000500de004301f4
001d022c001b0341004004d300390446002703d6001b03d5003402c30037
0173002b045900370363003402c00029029b000f022c0028011600030116
0000030a0027022c001d02d20053022c003e02d20053022c003e02d20053
022c003e02d20053022c003e02d20053022c003e029b000f022c0028029b
000f022c002803e8000803790024030a0030022c001e029b004c01f4003e
030a0027022c001d030a0027022c001d00deffe004c900290463003603e6
001b030a003002d2004c022c0040029b000f022c0028029b000f022c0028
029b0055022c0023029b0055022c00230116ffba00deff9d0116fffc00de
ffd6030a0027022c001d030a0027022c001d02d20058014dffeb02d20058
014d002702d20053022c003e02d20053022c003e02d2004f022c0040029b
000f022c0028029b0055022c0023030a0027022c001d030a0027022c001d
030a0027022c001d030a0027022c001d029b001501f4000a014d0026029b
000f022c0028029b004a022c003a029b004a022c003a029b004a022c003a
02d2002c01f4001d02d20051022c001b02d20051022c001b02d20051022c
001b02d20051022c001b02d20051022c001b029b0055022c0023029b0055
022c0023029b0055022c0023029b0055022c0023029b0055022c00230263
00550116000e030a0030022c001e02d2004f022c004002d2004f022c0040
02d2004f022c004002d2001c022c000d02d2004f022c00400116fff600de
ffd0011600130116000b029b004c01f4003e029b004c01f4003e029b004c
01f4003e022c004c00de0043022c004c00deffd0022c004c00deffdb022c
004c00deffe10341004a034100400341004a034100400341004a03410040
02d2004c022c004002d2004c022c004002d2004c022c004002d2004c022c
0040030a0027022c001d030a0027022c001d030a0027022c001d030a0027
022c001d029b0055022c003a029b0055022c003a02d20058014d004302d2
0058014d004002d20058014d002402d20058014d000c029b002f01f40020
029b002f01f40020029b002f01f40020029b002f01f40020029b002f01f4
0020026300100116000b026300100116000b026300100116fff102630010
0116fff402d20053022c003e02d20053022c003e02d20053022c003e02d2
0053022c003e02d20053022c003e029b001901f40005029b001901f40005
03b0001202d2000903b0001202d20009029b001501f40005029b001501f4
0005029b001501f4000a0263001701f400190263001701f4001902630017
01f40019022c00400116000802d2000901f4000a0116000e029b000f022c
0028029b000f022c0028029b000f022c0028029b000f022cffe6029b000f
022c0028029b000f022c0028029b000f022c0028029b000f022c0028029b
000f022c0028029b000f022c0028029b000f022c0028029b000f022c0028
029b0055022c0023029b0055022c0023029b0055022c0023029b0055022c
0023029b0044022cfff8029b0055022c0023029b0055022c0023029b0055
022c0023011600550116004b0116006100de0040030a0027022c001d030a
0027022c001d030a0027022c001d030a0027022cffec030a0027022c001d
030a0027022c001d030a0027022c001d0379002702a4001d0379002702a4
001d0379002702a4001d0379002702a4001d0379002702a4001d02d20053
022c003e02d20053022c003e035e005302ba003e035e005302ba003e035e
005302ba003e035e005302ba003e035e005302ba003e029b001501f4000a
029b001501f4000a029b001501f4000a02de002f01fd0011010bffe3010b
00050000fe950116005600b2004200b200420000fe870000fe8700b20042
015d000d0152000d0179004201800042010b0016010b00170186004201a7
00360190004201a700360300002e030afff8022c00740342004c03420074
022cffeb02d2fff9022c00400341004001ec004c0223004b01c8002c0217
002d030a0027014d000f03cc001203cc00120000fca50000fd170000fd17
0000fd150000fd1502ef002f022c00270318002602350025022c0012022c
001d025b0040025f001b022c00380250001b025d001e022c003f025d003f
010b004103b0002301b90042014d0041025b001d024e00180286001803a3
001b02a0000b0210000b02d6000e02530043024e004300d0004300d00043
00de005300bf003b014d005e014d001c00bf003b014d0004014d005e014d
001c00d0004300d00043014d000f014dfffc0116002001160020006ffff7
00a7002200a7002100dd00210169000400fa000501160026011600270124
0007012400070124001201240012014d002a012400160124001601240016
00fa001000fa0003006f00210124001c0116000401240012012400120124
000701240007014d003b011600270000fe700000fe5b0000fe5b0000febf
0000febf0000fe300000fe300000fddc0000fe5b0000fe300000fe700000
fe6b0000fe6b000000000116000000000000000000000000000001850026
018500260358005e03cc00120116006f0458004c03cc001203790066036c
000d0116003e0116003e0000000000000000000000000000000000000000
00000000032a001c030a0030022c004c022c004c029b001502ee00170395
000803cd002b0342002c02d2002c029b002b026400370337000e029b0055
022c003a029b0055022c003a02630001030a00270254004f011a001101aa
000802d20027015500110193ffff022c004c022c004c00de001500de0015
022c001e0263002c0263002c0263002c0263002c0263002c0263002c0263
002c0263002c02cf002c02c8002c03a0004203a5004203a5004203b00042
03ce003603b90036022c003a022c003a022c003a022c003a022c003a022c
003a034d0042034d004204210042042b004204140042041b00420263001d
0263001d0263001d0263001d0263001d0263001d0263001d0263001d0384
0042038400420458004204620042044c0042045200420479003604790036
0116005601160056011600200116001c0116001e0116001e011600110116
001101c8004201c80042029b004202a60042028f00420296004202bd0036
02bd003602630036026300360263003602630036026300360263003603bc
004203bc0042048f0042049a004204830042048a00420263005a0263005a
0263005a0263005a0263005a0263005a0263005a0263005a034d0042042b
0042041b00420442003602f6003402f6003402f6003402f6003402f60034
02f6003402f6003402f6003403b2004203b200420486004204900042047a
00420480004204a7003604a700360263002c0263002c022c003a022c003a
0263001d0263001d011600560116005602630036026300360263005a0263
005a02f6003402f600340263002c0263002c0263002c0263002c0263002c
0263002c0263002c0263002c03f0002c03ee002c04ac004204ce004204a3
004204b1004204cc003604ca00360263001d0263001d0263001d0263001d
0263001d0263001d0263001d0263001d049a0042049a0042056e00420578
00420561004205680042058f0036058f003602f6003402f6003402f60034
02f6003402f6003402f6003402f6003402f6003404c8004204c80042059c
004205a60042058f00420596004205bd003605bd00360263002c0263002c
0263002c0263002c0263002c0263002c0263002c029b000d029b000d0320
0016031d001703be000d0263001d0263001d0263001d0263001d0263001d
03420016034000170355001603490017040000560116ffe80116ffe80116
ffe70116ffed0116ffee0116ffe30116fff10116fff701980016019a0017
0263005a0263005a0263005a0263005a02630053026300530263005a0263
005a029b0014029b00140344001603740017034d004202f6003402f60034
02f6003402f6003402f600340397001603ae001703b2001603be00170423
002e0248001202660088026d004f0171000d0155001102d2002c030a0027
00de0010029b005502d2004f0000fea102990033022c001b03a3002c0386
00220342001e0342001e0342001c03f9006602df00430340003e02d20046
029b000f01f4000503b6006602d60043025e001b015d001202db000b02b3
001b02d20058022c002801860000025e004f01ea004f0312004f02590040
029b004c01f4003e0263001701f40019026d001501fd001c025e005c01b4
0047038e001c02b90013038e001c02b9001303a3002302c8001b02de0054
02350047022c002802980054029800540412002102de0013029b0019024d
000501f4001d0298003801f9002302e70013024000120116005c02a60016
01fd0012029b0019029b000f02d2002c01f4001d022cfff40263001000de
001e0155001102630010029b0055022c004c022c004c029b0055022c0023
021e001100deffed02d2005300d0001000d00010014d0019014d0019014d
001c014dfff50116006f014d001d014d001d02af002c0248001202480039
0116006f0248001202ae0025024800390116006f0116006f030a003701fd
001f01fd001f029b0055022c003e02d2002c0341004a02dd004a02bd0022
02d2002c02d2002c02d2002c01f4001d01f4001d01f4001d022c001b02d4
0017034f0016030d00170186000d0304000c0266001802360022014d005d
014d005d014d005d014d005d0134001d0134001d019c0000019c0000019c
0000019c0000019c00000236000901f0000f02220029020e0040020e0040
0176002d019e00090339001c0318001e028500170000fc49035c00110266
001000ea002500ef002500aa001200aa000500c8001500c700090175000b
0179000b012c00090124000901240009015c002500e6000300e6000303dd
001c04a20025047d0024047d0001009a0025021e001102b4000202b40006
0251000a0214000c00e6000300e6000301f3001e01f3001e01f6001c01ad
00050226001d0000fdc90000fe6a0000fe100000fe3f0000fe3f0000fd42
0000fe790000ff4f0000fe510000fe340000fd170000fe5a0225001a0225
001101f4001901f4001203a5000b0219000d01e9000e027e001903170018
0256001901f6000a02e1000a02e1000a02e1000a03e8fff603e8fff603e8
01cf03e801bb03e801cf03e801bb03e8fff503e8fff503e801cf03e801bb
03e8fff503e8fff503e80000006f002001160014011600120116000f00fa
00030116001202d2002c030a003002d2002c022b00110299001402630010
029b000f025a001402d00026025e002602d2002c0341004002d70018031f
001b03fe001a029900330299003301c3001f01b5001d01c3001f01b5001d
01c3002901b6001d01c3002901b6001d016d002901690029016900290169
0029016d0029016d0004016900000169000001690000016d000401a70029
01a7002901a7002901a7002901a7002901380000018e002201ce001301d6
000502760018033a001401bd003e0000fe330000fe330000fe2c0000fe2c
0000fe2c0000fe2c0000fe0c0000fe0c0000feaa0225001101f4001204fe
00270420001d020e0040020e0040020e0040018b001c018b001c01a10014
02770019018b0029018b0014018b0019018b00190172001c0172001c018b
0015009e002e0163002c024f002e018b002e018b001501630014018b0013
018b0015018b002900c50008018b002c01af001b024f002e0163000401b2
003e018b000601b20024025f00260306001502510019022c001c022c001d
0264001b0262001c026e001c03a1001e018b0005009e002e00ec002f018b
002c0163000401b2003e018b000601b2003b018b00050209002802d10008
00de004002220029037000160351001a025c000d026e000d016300060266
000d018e0006016400050165000600de0053014d0026028f003c0256000e
017f004602aa004a04460011022c001f01670019022c001f022c0018022c
0019022c0020022c0026020b0015022c0020022c002401db000401db0004
01db0004018e001b02ac0023030e0023023f001b029f000e031100050209
00080282001c03f3002c0296001403ad001701e5001b025f001b045f0014
03e6ffec02a70027028100100307002b03c6001b0229001d0379fffe0369
002b0377001b0296001002f7fff10323002b023f000a0323002b03e70018
02c5001402610018029400080357002b02be001104e7002b0363001003ef
0000045b002b022d0024034e001c047700200267001502b1001b02250000
02b7001002ce001c0209001c03e200020261002f02e40007033200100332
00100311000502310025037f002602f90010028b001b028b001b02e1002b
02c7000a039a0005025d001c02e5002b0375000a030b0014030d001b02b0
00200349002b036b002b049b00140323002b039700230265002b0265002b
04e3002702d2ffff0359000602c50014035a002b0293001c0315001c02ce
001c02b3000c02ea001b0400002b0288fffa02d2004a029b000f015e0049
0208001b01d00034023e0037024a002703b50024020000340220002a02d9
002503be00210251002501e4001d0496002401f1002a0200002603620024
0204001f021b0027033e002401ee00260307002f03480023030d00210200
00250320002201d4001e0212001e01df00280234002101fd002401ff0022
023e001c01f1002b0315001601db002e02a0002a023d00180222002a01e9
001e02240029034d00240216007800000000000000640000006400000064
000000640000006400000064000000640000006400000064000000640000
006400000064000000640000006400000064000000640000006400000064
00000064000000c0000000e4000001180000011800000270000002bc0000
03cc000005980000062400000754000008d40000092c00000b4800000cbc
00000cbc00000cbc00000cbc00000cbc00000cbc00000cbc00000cbc0000
0d1c00000d1c00000df800000df800000df800000df800000df800000df8
00000e2c00000e2c00000e2c00000e6c00000f0000000f8000000f800000
1050000010500000117000001298000012e4000012e40000132400001324
000013240000132400001324000013240000132400001324000013240000
132400001324000014a0000015d0000016b4000017f0000018c0000018c0
00001a2400001ac800001b1c00001b9800001b9800001bcc00001bcc0000
1c5c00001d9c00001ecc00001ecc00001f280000207000002114000021b4
000021f4000021f4000021f4000022680000226800002268000022680000
226800002268000022680000226800002268000022680000226800002268
000022680000226800002268000022680000226800002268000022680000
226800002268000022680000226800002268000022680000226800002268
000022680000226800002268000022680000226800002268000022680000
226800002268000022680000226800002268000022680000226800002268
000022680000226800002268000022680000226800002268000022680000
226800002268000022680000226800002268000022680000226800002268
000022680000226800002268000022680000226800002268000022680000
226800002268000022680000226800002268000022680000226800002268
000022680000226800002268000022680000226800002268000022680000
22680000226800002268000022680000226800002268000022680000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c0000228c0000228c0000228c0000228c0000
228c0000228c0000228c0000228c0000228c0000228c0000228c0000228c
0000228c0000228c0000228c000100000858009600090021000200020000
0000001e000002000428000100010000002301aa00010000000000000212
00000001000000000001000e021200010000000000020007022000010000
00000003002302270001000000000004000e024a00010000000000050007
02580001000000000006000d025f000100000000000700e4026c00010000
0000000900160350000100000000000a01330366000100000000000b0018
0499000100000000000c002504b10001000000000100000d04d600010000
00000101001404e30001000000000102000904f700010000000001030010
050000010000000001040012051000030001040400020006052200030001
04060002000e05280003000104070002000c053600030001040900000424
05420003000104090002000e096600030001040b00020010097400030001
040c0002000c09840003000104100002001009900003000104110002000a
09a00003000104120002000609aa0003000104130002001009b000030001
04140002000c09c00003000104160002000c09cc0003000104190002000e
09d800030001041d0002000c09e60003000108040002000609f200030001
0c010002000809f8000300010c0a0002000c0a00436f7079726967687420
28632920313938312c20313938322c20313938332c203139383920616e64
20313939332c204c696e6f74797065204c69627261727920476d6248206f
722069747320616666696c6961746564204c696e6f747970652d48656c6c
20636f6d70616e6965732e20416c6c207269676874732072657365727665
642e0a0a546865206469676974616c6c7920656e636f646564206d616368
696e65207265616461626c6520736f66747761726520666f722070726f64
7563696e672074686520547970656661636573206c6963656e7365642074
6f20796f75206973206e6f77207468652070726f7065727479206f662048
656964656c62657267657220447275636b6d61736368696e656e20414720
616e6420697473206c6963656e736f72732c20616e64206d6179206e6f74
20626520726570726f64756365642c20757365642c20646973706c617965
642c206d6f6469666965642c20646973636c6f736564206f72207472616e
7366657272656420776974686f7574207468652065787072657373207772
697474656e20617070726f76616c206f662048656964656c626572676572
20447275636b6d61736368696e656e2041472e0a0a436f70797269676874
2028632920313938382c20313939302c20313939332041646f6265205379
7374656d7320496e636f72706f72617465642e20416c6c20526967687473
2052657365727665642e48656c766574696361204e657565526567756c61
7248656c766574696361204e6575653b20382e30643665313b2032303132
2d30332d323748656c766574696361204e657565382e306436653148656c
7665746963614e6575652248656c766574696361204e6575652220697320
612074726164656d61726b206f662048656964656c626572676572204472
75636b6d61736368696e656e2041472c207768696368206d617920626520
7265676973746572656420696e206365727461696e206a75726973646963
74696f6e732c206578636c757369766c79206c6963656e73656420746872
6f756768204c696e6f74797065204c69627261727920476d62482c206120
77686f6c6c79206f776e65642073756273696469617279206f6620486569
64656c62657267657220447275636b6d61736368696e656e2041472e4c69
6e6f747970652044657369676e2053747564696f48656c76657469636120
284c6174696e20666f72205377697373292068617320746865206f626a65
637469766520616e642066756e6374696f6e616c207374796c6520776869
636820776173206173736f63696174656420776974682053776973732074
79706f67726170687920696e2074686520313935307320616e6420313936
30732e204974206973207065726665637420666f7220696e7465726e6174
696f6e616c20636f72726573706f6e64656e63653a206e6f206f726e616d
656e742c206e6f20656d6f74696f6e2c206a75737420636c656172207072
6573656e746174696f6e206f6620696e666f726d6174696f6e2e2048656c
766574696361206973207374696c6c206f6e65206f662074686520626573
742073656c6c696e672073616e732d736572696620666f6e74732e687474
703a2f2f7777772e4c696e6f747970652e636f6d2f687474703a2f2f7777
772e6c696e6f747970652e636f6d2f666f6e7464657369676e657273536d
617274205377617368657341726368616963204c6f6e6720732053776173
684c6967617475726573436f6d6d6f6e204c69676174757265734f707469
6f6e616c204c69676174757265736a196e969ad4004f007200640069006e
00e60072004e006f0072006d0061006c0043006f00700079007200690067
00680074002000280063002900200031003900380031002c002000310039
00380032002c00200031003900380033002c002000310039003800390020
0061006e006400200031003900390033002c0020004c0069006e006f0074
0079007000650020004c00690062007200610072007900200047006d0062
00480020006f0072002000690074007300200061006600660069006c0069
00610074006500640020004c0069006e006f0074007900700065002d0048
0065006c006c00200063006f006d00700061006e006900650073002e0020
0041006c006c002000720069006700680074007300200072006500730065
0072007600650064002e000a000a00540068006500200064006900670069
00740061006c006c007900200065006e0063006f0064006500640020006d
0061006300680069006e00650020007200650061006400610062006c0065
00200073006f00660074007700610072006500200066006f007200200070
0072006f0064007500630069006e00670020007400680065002000540079
00700065006600610063006500730020006c006900630065006e00730065
006400200074006f00200079006f00750020006900730020006e006f0077
0020007400680065002000700072006f007000650072007400790020006f
0066002000480065006900640065006c0062006500720067006500720020
0044007200750063006b006d00610073006300680069006e0065006e0020
0041004700200061006e006400200069007400730020006c006900630065
006e0073006f00720073002c00200061006e00640020006d006100790020
006e006f007400200062006500200072006500700072006f006400750063
00650064002c00200075007300650064002c00200064006900730070006c
0061007900650064002c0020006d006f006400690066006900650064002c
00200064006900730063006c006f0073006500640020006f007200200074
00720061006e007300660065007200720065006400200077006900740068
006f00750074002000740068006500200065007800700072006500730073
0020007700720069007400740065006e00200061007000700072006f0076
0061006c0020006f0066002000480065006900640065006c006200650072
00670065007200200044007200750063006b006d00610073006300680069
006e0065006e002000410047002e000a000a0043006f0070007900720069
006700680074002000280063002900200031003900380038002c00200031
003900390030002c00200031003900390033002000410064006f00620065
002000530079007300740065006d007300200049006e0063006f00720070
006f00720061007400650064002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00520065
00670075006c00610072004e006f0072006d00610061006c0069004e006f
0072006d0061006c005200650067006f006c00610072006530ec30ae30e5
30e930fcc77cbc18ccb40052006500670075006c006900650072004e006f
0072006d0061006c004e006f0072006d0061006c041e0431044b0447043d
044b0439004e006f0072006d0061006c5e3889c44f5306390627062f064a
004e006f0072006d0061006c0000b800142bb8000a2bb800002b00>
[8845 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> KEGQMX+HelveticaNeue AddT42Char 
1 228 21 <00010053000000c2006f0003001bba0003000000032bb800031000ba0000
000100032bb8000010303137153335536f6f6f6f0000>KEGQMX+HelveticaNeue AddT42Char 
1 624 24 <000100570000016402c5000a0023ba0001000900032bb800011000b80001
2fb800002fba0007000800032bb800071030312111230e03231533110164
410726374424b802c528341e0b44fe04>KEGQMX+HelveticaNeue AddT42Char 
1 1432 27 <0002001c0000020302c50003000e0051ba0004000000032bb8000410b800
0010b80009d0b8000410b8000bd0b8000410b80010dc00b800052fb8000a
2fba0001000800032bb8000110ba0003000a0005111239b80004d0b80008
10b8000cd030312523133313112301152115333533350153eeec025044fe
bd01375060f1015bfea501d4fe3352a6a64b0000>KEGQMX+HelveticaNeue AddT42Char 
1 1572 28 <00010023fff501fd02b9002b00adb8002d2fba0016001700032bb8001610
b80002d0b8001610b80004d0b800042fb8002d10b80021dcb8000cdc4105
00da000c00ea000c00025d411b0009000c0019000c0029000c0039000c00
49000c0059000c0069000c0079000c0089000c0099000c00a9000c00b900
0c00c9000c000d5dba002a0017002111123900ba0011001c00032bb80011
10ba0001000000032bb8000110ba0026000700032bb8002610ba002a0007
0026111239303101352103173e0133321e0215140e0223222e0227231e03
33323e0235342e0223220607273701d6fea2424919412a243b2a17182937
1e20352717025501243e512e3e5d3e1f243e542f2449170226026e4bfe90
041e25182b3b232a3f2a1513232f1b304c331b2742552d3d5b3d1e191a02
cc000000>KEGQMX+HelveticaNeue AddT42Char 
1 5812 75 <00020024fff5020e02ca0013002c00bbb8002d2fba0015001600032bb800
1510b8002d10b80022d0b800222fb80000dc411b00060000001600000026
000000360000004600000056000000660000007600000086000000960000
00a6000000b6000000c60000000d5d410500d5000000e5000000025db800
1610b8000ad0b8000a2fb8001610b80018d0b800182fb8001610b8002ad0
b8002a2fba002b00220015111239b8001610b8002cd000b800152fba000f
002700032bb8000f10ba001d000500032bb8001d10303137343e0233321e
0215140e0223222e0205112311232e0323220e0215141e02333236373315
7e10243c2b2c3e271211263c2b293d2713019055020e292e2e143b593b1d
1e3b593c365a1502fe264838222136472624463722203645da02cafef617
1f13082b49623737624a2c262b460000>KEGQMX+HelveticaNeue AddT42Char 
1 7580 87 <00020043ff3b022d02110018002c00adb8002e2fba0018000000032bb800
1810b80002d0b8001810b80004d0b800042fb8002e10b8000edcb8001810
b80016d0b800162fb8000e10b80019dc410500da001900ea001900025d41
1b0009001900190019002900190039001900490019005900190069001900
790019008900190099001900a9001900b9001900c90019000d5db8001810
b80023d0b800232f00b800012fba0013002800032bb8001310ba001e0009
00032bb8001e10303113113311331e0333323e0235342e02232206072335
05140e0223222e0235343e0233321e024355020e292e2f133b593b1d1e3b
593c365a1502013b10243b2c2c3e271211263c2b293d27130205fd36010a
171f12082a49623737624b2c272b46fe2648382221364726244637222036
45000000>KEGQMX+HelveticaNeue AddT42Char 
1 0 0 <00020033000101cc02c8000300070037b800142bb800082fb800092fb800
04dcb80000dcb8000810b80006d0b800062fb80002dc00ba000300050017
2bba0004000000172b303101211121131121110199fecd013333fe67029a
fd950299fd3902c70000>KEGQMX+HelveticaNeue AddT42Char 
KEGQMX+HelveticaNeue /CharStrings get begin
/space 3 def
/period 21 def
/one 24 def
/four 27 def
/five 28 def
/d 75 def
/p 87 def
end
KEGQMX+HelveticaNeue /Encoding get
dup 32 /space put
dup 46 /period put
dup 49 /one put
dup 52 /four put
dup 53 /five put
dup 100 /d put
dup 112 /p put
pop
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue /KEGQMX+HelveticaNeue findfont ct_VMDictPut/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one 2{/.notdef}rp /four /five 46{/.notdef}rp /d 11{/.notdef}rp /p 143{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [7.9792 0 0 -7.9792 0 0 ]msf57.7568 76.9971 mo(14.5 dpp)[4.00556 4.44441 2.35386 4.43644 2.21822 4.82743 4.85137 0 ]xsh253.989 77.4918 mo(14 dpp)[4.00557 4.43643 2.2182 4.82745 4.85135 0 ]xsh2 lw
10 ml
[] 0 dsh
90.3232 80.835 mo
57.0762 80.835 li
@
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 280 23 <0002002afff5020202c50017003300cbb800342fb800352fb8003410b800
18d0b800182fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8003510b80026dcb800
0edc410500da000e00ea000e00025d411b0009000e0019000e0029000e00
39000e0049000e0059000e0069000e0079000e0089000e0099000e00a900
0e00b9000e00c9000e000d5d00ba0013001f00032bb8001310ba002d0007
00032bb8002d10303113343e0433321e0415140e0223222e0227141e0433
323e0435342e0423220e0484010911213224243221110901051b3c36363c
1b055a04101e344f37384e341e100404101e344f37374f341e1004015d1a
3f3f3c2d1c1c2d3c3f3f1a2863573c3c57632727545047361f1f36475054
2727545048362020364850540000>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/zero 23 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one 2{/.notdef}rp /four /five 46{/.notdef}rp /d 11{/.notdef}rp /p 143{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [7.9792 0 0 -7.9792 0 0 ]msf125.356 77.9863 mo(10 dpp)[4.15717 4.43643 2.21822 4.82742 4.85138 0 ]xsh154.6 80.835 mo
121.354 80.835 li
@
223.311 80.835 mo
190.063 80.835 li
@
218.878 80.835 mo
185.631 80.835 li
@
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 2348 31 <00030028fff5020402c5000f002f00410161ba0030001600032bb8003010
ba0026000800032bb8002610411b00060030001600300026003000360030
00460030005600300066003000760030008600300096003000a6003000b6
003000c60030000d5d410500d5003000e5003000025dba00100016003011
1239b800102fb80000dc410500da000800ea000800025d411b0009000800
190008002900080039000800490008005900080069000800790008008900
080099000800a9000800b9000800c90008000d5dba003a00080026111239
b8003a2f410500da003a00ea003a00025d411b0009003a0019003a002900
3a0039003a0049003a0059003a0069003a0079003a0089003a0099003a00
a9003a00b9003a00c9003a000d5db80020dcba001300160020111239ba00
2300160020111239b80043dc00ba003f001b00032bb8003f10ba002b0005
00032bb8002b10ba000b003500032bb8000b10ba00130035000b111239ba
00230035000b111239303113343e0233321615140623222e02271416170e
0115141e0233323e02353426273e0135342e0223220e0213343e0233321e
0215140e022322269b14212e19344342331a2e22145a362d3c4025415833
31563f253e402d351833523a294b3a22411729371f1e3528171527352042
55020d1b281c0e3736363c0e1c2b20305112155d3f3651361a1c37503442
5b14144f302241331f182e43fe8c1f3224131524311d1e32251549000000
>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/eight 31 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one 2{/.notdef}rp /four /five 2{/.notdef}rp /eight 43{/.notdef}rp /d 11{/.notdef}rp /p 143{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [7.9792 0 0 -7.9792 0 0 ]msf189.651 77.9863 mo(18 dpp)[4.12524 4.43643 2.21822 4.82744 4.85138 0 ]xsh283.154 80.835 mo
249.907 80.835 li
@
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 1876 29 <00020026fff5020702c50023003700e3ba001c000900032bb8001c10ba00
13002900032bb8001310411b0006001c0016001c0026001c0036001c0046
001c0056001c0066001c0076001c0086001c0096001c00a6001c00b6001c
00c6001c000d5d410500d5001c00e5001c00025d410500da002900ea0029
00025d411b00090029001900290029002900390029004900290059002900
69002900790029008900290099002900a9002900b9002900c90029000d5d
b8000910b80033dcb8001310b80039dc00ba002e000e00032bb8002e10ba
0004002100032bb8000410ba0018002400032bb8001810b8000410b80000
dc303101332e0123220e0215141e0233323e0235342e0223220607273e03
33321607321e0215140e0223222e0235343e02019e550868584c643c1911
34604f435b37181e3751333a591e02010e254236333e7a24362411132435
23233725141326360210585d406a8949387864402d45542731543e232c31
02295e51353ac31a2b3b211f392c19192a3a21213b2b1900>ZDWBNI+HelveticaNeue AddT42Char 
1 2260 30 <00010032000001fd02b9000e001fba000a000900032bb8000a1000b80009
2fba0002000300032bb8000210303101352115210e0307333e0301fdfe35
017438614a2f065f052e495e027049503b8c9dab5a53b0a692000000>ZDWBNI+HelveticaNeue AddT42Char 
1 3260 40 <0002fffa0000029002ca0003000b002500b800042fb800052fb800092fba
0000000700032bb8000010ba00020005000411123930311b013313030133
3721173301c9790277abfeea6150012e4e69fee90127014dfeb301a3fd36
d7d702ca0000>ZDWBNI+HelveticaNeue AddT42Char 
1 3356 42 <0001002bfff002aa02db0025006dba001e000b00032bb8001e10411b0006
001e0016001e0026001e0036001e0046001e0056001e0066001e0076001e
0086001e0096001e00a6001e00b6001e00c6001e000d5d410500d5001e00
e5001e00025d00ba0019001000032bb8001910ba0006002300032bb80006
10303101332e0323220e0215141e0233323637230e0323222e0235343e02
33321602445f08344e6438527f552c29527c53899e0e5f031e35492f405c
3b1c1c3b5b404b6d01f339573a1e3b66894e4e88643996872c4c371f3051
6d3d386851304c000000>ZDWBNI+HelveticaNeue AddT42Char 
1 3840 53 <0001004d0000028602ca000b004bba0003000000032bb8000310ba000700
0800032bb8000710b8000810b8000ad0b8000a2f00b800012fb800052fb8
00002fb800072fba000400010000111239ba000a00010000111239303113
11331133013311231123014d5a020175685a02fe8802cafd36023dfdc302
cafdbd0243000000>ZDWBNI+HelveticaNeue AddT42Char 
1 4176 57 <0002004e0000029002ca0020002b009db8002d2fba0023000000032bb800
2310b80002d0b8002d10b8001ddcba001a0000001d111239b80027dc4105
00da002700ea002700025d411b0009002700190027002900270039002700
490027005900270069002700790027008900270099002700a9002700b900
2700c90027000d5d00b800012fb8000e2fba0000002300032bb8000010ba
0022000300032bb8002210ba001a0003002211123930311311331133321e
02171e0317332e03272e0327353e013534262303233533321615140e024e
5fe8232a1a0c04050202070a6a0f0f080202030b17271f413b73662bc6ec
433c1b2d3c02cafd36013115232f1a1a362f260b122f34361a1a30271c06
021262415764feb7f9443627311d0a000000>ZDWBNI+HelveticaNeue AddT42Char 
1 4900 72 <00020024fff5020a02110030004200c3ba003c002400032bb8003c10ba00
07001a00032bb8000710411b0006003c0016003c0026003c0036003c0046
003c0056003c0066003c0076003c0086003c0096003c00a6003c00b6003c
00c6003c000d5d410500d5003c00e5003c00025dba00110024003c111239
b800112fb80012dcb8001a10b8002cd0b8002c2fb8001a10b80031d0b800
312fb8000710b80044dc00ba0037002900032bb8003710ba000c00150003
2bb8000c10b8003710b80003d0b8000c10b80012dcb8002910b8002fd030
312535062322263511342e0223220e0207333e0133321e0215140e02070e
0315141e0233323637141633320315140e0223222e0235343e04020a0f0b
1407223845232b4e3c240255034836142921151c303f23213f311e1b2f3e
23365d232721277412263c2a13251b111d2e3a39340242051c1e010a2d38
1f0a1229423039290612221c18190d0707061223382c2737230f252a2a25
0116571229231708121d1520251409070b000000>ZDWBNI+HelveticaNeue AddT42Char 
1 5280 73 <00020043fff5022d02ca0018002c00adb8002e2fba0018000000032bb800
1810b80002d0b8001810b80004d0b800042fb8002e10b8000edcb8001810
b80016d0b800162fb8000e10b80019dc410500da001900ea001900025d41
1b0009001900190019002900190039001900490019005900190069001900
790019008900190099001900a9001900b9001900c90019000d5db8001810
b80023d0b800232f00b800002fba001e000900032bb8001e10ba00130028
00032bb8001310303113113335331e0333323e0235342e02232206072311
01140e0223222e0235343e0233321e024355020e292e2f133b593b1d1e3b
593c365a1502013b10243b2c2c3e271211263c2b293d271302cafd364517
1f12082a49623737624b2c272b010bfe3d26483822213647262446372220
36450000>ZDWBNI+HelveticaNeue AddT42Char 
1 5584 74 <00010024fff501fa021100230079ba001c000b00032bb8001c10411b0006
001c0016001c0026001c0036001c0046001c0056001c0066001c0076001c
0086001c0096001c00a6001c00b6001c00c6001c000d5d410500d5001c00
e5001c00025d00ba0017001000032bb8001710ba0006002100032bb80006
10b80000dcb8001010b80014dc303101332e0323220e0215141e02333236
37230e0123222e0235343e02333216019f5805263b4d2c3d5c3d1e1f3d5b
3b63730e5708473f283a241110253e2e3640015f2e432c152b4b653a3a61
462668603c42203544242749382236000000>ZDWBNI+HelveticaNeue AddT42Char 
1 6128 76 <00020024fff502030211000a0026005bba0014001f00032bb8001410ba00
15000000032bb8001510b8001410b80001d0b8000010b8000cd0b8000c2f
00ba000f002400032bb8000f10ba001a000600032bb8001a10ba00010014
00032bb8000110b8002410b8000cdc303101213e0333321e0217230e0123
222e023721362e0223220e02151e0333323601a7fed70216263521203527
1754540b45362a3e28120101830215375b4535594124021f3e5b3e587401
341e352817172736ae33321c2f3d222f6858392848623b3b64482858>ZDWBNI+HelveticaNeue AddT42Char 
1 6336 78 <00020024ff2f01fe02110028003c00bdba002e000c00032bb8002e10ba00
01000200032bb8000110b8000210b80038d0b800382fba00040002003811
1239b8000210b80015d0411b0006002e0016002e0026002e0036002e0046
002e0056002e0066002e0076002e0086002e0096002e00a6002e00b6002e
00c6002e000d5d410500d5002e00e5002e00025dba0021000c002e111239
b800212fb80020dcb8000110b8003edc00ba001b002600032bb8001b10ba
0007003300032bb8000710ba0029001100032bb800291030312511231523
2e0123220e0215141e02333236373315140e0223222e0227231e03333236
27222e0235343e0233321e0215140e0201fe5001175231435c38181d3a56
3a3259160211263a2a152e271b015502283d4b247c74ee2a38220e11253a
292838231011243b2c01d94a2b2b334f612e355f472a2d30222b48331d09
1420172a3a24107e98233946232544341f203542222448392300>ZDWBNI+HelveticaNeue AddT42Char 
1 6692 79 <00010040000001ec02ca001a0051ba001a000000032bb8001a10ba000e00
0b00032bb8000e10b8001a10b80002d0b8001a10b80018d0b800182f00b8
00002fb800012fb8000c2fba0013000800032bb8001310ba001900010000
111239303113113311343e0233321615113311342e0223220e0207231140
5513263927313855112a443317312d240a0202cafd360124233b2c183830
fea201542a45321c0a1521180111>ZDWBNI+HelveticaNeue AddT42Char 
1 6856 80 <000200450000009a02ca00030007002fba0001000200032bb8000110b800
0210b80004d0b8000110b80006d000b800052fba0001000000032bb80001
1030311335231d011133119a5555026268685dfdfb020500>ZDWBNI+HelveticaNeue AddT42Char 
1 7116 85 <00010040000001ec021100170045ba0003000000032bb8000310ba000e00
0b00032bb8000e10b8000310b80015d0b800152fba001600000003111239
00b800012fb8000c2fba0013000800032bb8001310303113113311343e02
33321615113311342e022322072335405513263927313855112a44337335
020205fdfb0124233b2c183830fea201542a45321c5e5200>ZDWBNI+HelveticaNeue AddT42Char 
1 7884 89 <0001003d0000014d0213000e0027ba0003000100032bb8000310b8000dd0
b8000d2f00b800012fba0009000800032bb8000910303113113335343e02
333526060723353d55142c4833455a1f020205fdfbe6324d361c5a023c3f
6d00>ZDWBNI+HelveticaNeue AddT42Char 
1 8468 92 <00010040fff501ec020500180051ba000c000d00032bb8000c10ba000100
0200032bb8000110b8000210b80016d0b800162fba001700020001111239
b8000210b80018d0b800182f00b800012fb8000c2fba0008001300032bb8
000810303121112311140e0223222635112311141e0233323637331501ec
5513263927313855112a443339541b020205fedc233b2c183830015efeac
2a45321b2d3052000000>ZDWBNI+HelveticaNeue AddT42Char 
1 8808 182 <0001000000ee01f4013e0003000b00ba0000000100032b30311115213501
f4013e505000>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/six 29 def
/seven 30 def
/A 40 def
/C 42 def
/N 53 def
/R 57 def
/a 72 def
/b 73 def
/c 74 def
/e 76 def
/g 78 def
/h 79 def
/i 80 def
/n 85 def
/r 89 def
/u 92 def
/endash 182 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 54 /six put
dup 55 /seven put
dup 65 /A put
dup 67 /C put
dup 78 /N put
dup 82 /R put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 117 /u put
dup 208 /endash put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one 2{/.notdef}rp /four /five /six /seven /eight 8{/.notdef}rp /A /.notdef /C 10{/.notdef}rp /N 3{/.notdef}rp /R 14{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 2{/.notdef}rp /u 90{/.notdef}rp /endash 47{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [0 -9.3091 -9.3091 0 0 0 ]msf23.562 234.609 mo(Change in piRNA abundance per gene)[-6.79564 -5.25964 -5.12003 -5.26895 -5.43655 -4.99901 -2.58794 -2.13179 -5.17586 -2.58792 -5.6041 -2.12248 -6.48842 -6.84219 -6.03226 -2.58792 -5.11072 -5.6041 -5.25964 -5.26895 -5.6041 -5.12003 -5.26894 -5.10141 -4.99901 -2.58794 -5.62271 -5.15726 -3.09987 -2.58792 -5.44588 -5.13864 -5.25964 0 ]yshZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf25.8813 204.143 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf33.4326 201.928 mo(\3206)[2.20966 0 ]xshZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf26.1611 220.113 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf33.7124 217.899 mo(\3207)[1.92667 0 ]xsh.75 lw
1 ml
40.4551 106.085 mo
42.8501 106.085 li
40.4551 106.889 mo
42.8501 106.889 li
40.4551 107.803 mo
42.8501 107.803 li
40.4551 108.86 mo
42.8501 108.86 li
40.4551 110.103 mo
42.8501 110.103 li
40.4551 111.634 mo
42.8501 111.634 li
40.4551 113.606 mo
42.8501 113.606 li
40.4551 116.381 mo
42.8501 116.381 li
@
40.4551 90.3125 mo
42.8501 90.3125 li
40.4551 91.1155 mo
42.8501 91.1155 li
40.4551 92.0305 mo
42.8501 92.0305 li
40.4551 93.0865 mo
42.8501 93.0865 li
40.4551 94.3295 mo
42.8501 94.3295 li
40.4551 95.8605 mo
42.8501 95.8605 li
40.4551 97.8335 mo
42.8501 97.8335 li
40.4551 100.61 mo
42.8501 100.61 li
@
40.4551 132.982 mo
42.8491 132.982 li
@
40.4551 130.207 mo
42.8491 130.207 li
@
40.4551 128.235 mo
42.8491 128.235 li
@
40.4551 126.702 mo
42.8491 126.702 li
@
40.4551 125.46 mo
42.8491 125.46 li
@
40.4551 124.403 mo
42.8491 124.403 li
@
40.4551 123.49 mo
42.8491 123.49 li
@
40.4551 122.686 mo
42.8491 122.686 li
@
40.4551 121.956 mo
43.7801 121.956 li
@
40.4551 105.354 mo
43.7801 105.354 li
@
40.4551 148.754 mo
42.8491 148.754 li
@
40.4551 145.979 mo
42.8491 145.979 li
@
40.4551 144.008 mo
42.8491 144.008 li
@
40.4551 142.474 mo
42.8491 142.474 li
@
40.4551 141.233 mo
42.8491 141.233 li
@
40.4551 140.175 mo
42.8491 140.175 li
@
40.4551 139.262 mo
42.8491 139.262 li
@
40.4551 138.458 mo
42.8491 138.458 li
@
40.4551 137.728 mo
43.7801 137.728 li
@
40.4551 180.806 mo
42.8491 180.806 li
@
40.4551 178.03 mo
42.8491 178.03 li
@
40.4551 176.059 mo
42.8491 176.059 li
@
40.4551 174.525 mo
42.8491 174.525 li
@
40.4551 173.284 mo
42.8491 173.284 li
@
40.4551 172.227 mo
42.8491 172.227 li
@
40.4551 171.313 mo
42.8491 171.313 li
@
40.4551 170.509 mo
42.8491 170.509 li
@
40.4551 165.032 mo
42.8491 165.032 li
@
40.4551 162.258 mo
42.8491 162.258 li
@
40.4551 160.286 mo
42.8491 160.286 li
@
40.4551 158.753 mo
42.8491 158.753 li
@
40.4551 157.511 mo
42.8491 157.511 li
@
40.4551 156.453 mo
42.8491 156.453 li
@
40.4551 155.54 mo
42.8491 155.54 li
@
40.4551 154.737 mo
42.8491 154.737 li
@
40.4551 154.007 mo
43.7801 154.007 li
@
40.4551 169.779 mo
43.7801 169.779 li
@
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 192 20 <0001003200ee0153013e0003000b00ba0000000100032b30311315213532
0121013e5050>ZDWBNI+HelveticaNeue AddT42Char 
1 700 25 <00010018000001ee02c5002b0091b8002d2fba0001000000032bb8000110
b8002d10b80022dcb8000bdc410500da000b00ea000b00025d411b000900
0b0019000b0029000b0039000b0049000b0059000b0069000b0079000b00
89000b0099000b00a9000b00b9000b00c9000b000d5db8002210b80016d0
b800162fb8000110b80018d0b800182f00ba0018001500032bba00270006
00032bb800271030311333263e0233321e0215140e02070e03072135213e
03373e0335342e0223220e022c55010f2235251c322516172d442d254436
230501cffe940627374221213e301d233c512e38583b1c01ca203f321f12
222f1d2538302f1c163242593f4b21332c2714152e39482f324c331b2643
5c00>ZDWBNI+HelveticaNeue AddT42Char 
1 972 26 <0001001dfff501fe02c5003e0123ba0010001100032bb8001010ba001b00
0800032bb8001b10410500da000800ea000800025d411b00090008001900
080029000800390008004900080059000800690008007900080089000800
99000800a9000800b9000800c90008000d5dba001f0011001b111239ba00
220008001b111239b800222fba002c00110010111239b8002c2fb8002ddc
b8002210b80035dc410500da003500ea003500025d411b00090035001900
350029003500390035004900350059003500690035007900350089003500
99003500a9003500b9003500c90035000d5db8001b10b80040dc00ba000d
001600032bb8000d10ba0027003200032bb8002710ba003a000300032bb8
003a10b8000310b80001d0b800012fba001f0003003a111239b8003a10b8
003dd0303113153633321e0215140e022322262723061e0233323e023534
2627353e0135342e0223220e020733343e0233321615140e022b01222322
da181b20372818192a381f494c025501213e5836325942273f412a38213a
4f2e3551361d02551021332236481625311b120505040195480311233321
20332313574537563b1e1b365135405e0e02134a3031482e17223c54331f
382a1939391c2c1d0f00>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/hyphen 20 def
/two 25 def
/three 26 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 45 /hyphen put
dup 50 /two put
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 8{/.notdef}rp /A /.notdef /C 10{/.notdef}rp /N 3{/.notdef}rp /R 14{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 2{/.notdef}rp /u 90{/.notdef}rp /endash 47{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf28.1157 108.321 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf35.6406 106.106 mo(0)shZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf26.8574 124.292 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf34.3213 122.078 mo(-1)[1.31807 0 ]xshZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf26.6294 140.263 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf34.0933 138.048 mo(-2)[1.54679 0 ]xshZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf28.3267 92.3506 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf35.6406 90.1362 mo(1)shZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf25.9536 156.232 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf33.5049 154.018 mo(\3203)[2.13601 0 ]xshZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf25.9058 172.203 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf33.457 169.988 mo(\3204)[2.18253 0 ]xshZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf25.918 188.173 mo(10)[3.51753 0 ]xshZDWBNI+HelveticaNeue*1 [3.8766 0 0 -3.8766 0 0 ]msf33.4692 185.958 mo(\3205)[2.17089 0 ]xsh10 ml
43.7798 201.572 mo
40.4548 201.572 li
@
1 ml
40.4551 196.826 mo
42.8491 196.826 li
@
40.4551 194.051 mo
42.8491 194.051 li
@
40.4551 192.079 mo
42.8491 192.079 li
@
40.4551 190.545 mo
42.8491 190.545 li
@
40.4551 189.305 mo
42.8491 189.305 li
@
40.4551 188.246 mo
42.8491 188.246 li
@
40.4551 187.333 mo
42.8491 187.333 li
@
40.4551 186.529 mo
42.8491 186.529 li
@
40.4551 185.8 mo
43.7801 185.8 li
@
10 ml
43.7798 217.344 mo
40.4548 217.344 li
40.4548 201.572 li
40.4548 185.8 li
40.4548 89.5822 li
43.7798 89.5822 li
@
1 ml
40.4551 212.598 mo
42.8491 212.598 li
@
40.4551 209.823 mo
42.8491 209.823 li
@
40.4551 207.852 mo
42.8491 207.852 li
@
40.4551 206.318 mo
42.8491 206.318 li
@
40.4551 205.077 mo
42.8491 205.077 li
@
40.4551 204.018 mo
42.8491 204.018 li
@
40.4551 203.105 mo
42.8491 203.105 li
@
40.4551 202.302 mo
42.8491 202.302 li
@
120.518 163.277 mo
130.495 163.277 li
130.495 152.396 li
120.518 152.396 li
cp
0 0 0 0 cmyk
f
10 ml
[2 2 ] 0 dsh
125.507 214.001 mo
125.507 163.277 li
0 0 0 1 cmyk
@
125.507 147.323 mo
125.507 152.396 li
@
[] 0 dsh
123.012 214.001 mo
127.999 214.001 li
@
123.012 147.323 mo
127.999 147.323 li
@
120.518 163.277 mo
130.495 163.277 li
130.495 152.396 li
120.518 152.396 li
cp
.152 .348 1 .004 cmyk
f
145.458 172.489 mo
155.437 172.489 li
155.437 120.437 li
145.458 120.437 li
cp
0 0 0 0 cmyk
f
[2 2 ] 0 dsh
150.445 212.756 mo
150.445 172.489 li
0 0 0 1 cmyk
@
150.445 116.01 mo
150.445 120.438 li
@
[] 0 dsh
147.953 212.756 mo
152.941 212.756 li
@
147.953 116.01 mo
152.941 116.01 li
@
145.458 172.489 mo
155.437 172.489 li
155.437 120.437 li
145.458 120.437 li
cp
.8 1 .2 0 cmyk
f
1.5 lw
1 lj
120.518 156.751 mo
130.495 156.751 li
.746 .676 .668 .898 cmyk
@
145.458 145.86 mo
155.436 145.86 li
0 0 0 0 cmyk
@
184.793 108.394 mo
194.771 108.394 li
194.771 106.856 li
184.793 106.856 li
cp
f
.75 lw
0 lj
[2 2 ] 0 dsh
189.784 111.386 mo
189.784 108.394 li
0 0 0 1 cmyk
@
189.784 105.268 mo
189.784 106.857 li
@
[] 0 dsh
187.29 111.386 mo
192.277 111.386 li
@
187.29 105.268 mo
192.277 105.268 li
@
184.793 108.394 mo
194.771 108.394 li
194.771 106.856 li
184.793 106.856 li
cp
.152 .348 1 .004 cmyk
f
209.735 108.412 mo
219.713 108.412 li
219.713 107.038 li
209.735 107.038 li
cp
.8 1 .2 0 cmyk
f
[2 2 ] 0 dsh
214.722 110.698 mo
214.722 108.411 li
0 0 0 1 cmyk
@
214.722 105.456 mo
214.722 107.038 li
@
[] 0 dsh
212.23 110.698 mo
217.217 110.698 li
@
212.23 105.456 mo
217.217 105.456 li
@
1 lj
184.794 107.556 mo
194.771 107.556 li
.746 .676 .668 .898 cmyk
@
0 lj
209.735 107.538 mo
219.713 107.538 li
0 0 0 0 cmyk
@
249.071 115.134 mo
259.049 115.134 li
259.049 113.877 li
249.071 113.877 li
cp
f
[2 2 ] 0 dsh
254.063 117.104 mo
254.063 115.134 li
0 0 0 1 cmyk
@
254.063 112.453 mo
254.063 113.877 li
@
[] 0 dsh
251.566 117.104 mo
256.553 117.104 li
@
251.566 112.453 mo
256.553 112.453 li
@
249.071 115.134 mo
259.049 115.134 li
259.049 113.877 li
249.071 113.877 li
cp
.152 .348 1 .004 cmyk
f
274.013 156.35 mo
283.99 156.35 li
283.99 124.101 li
274.013 124.101 li
cp
0 0 0 0 cmyk
f
[2 2 ] 0 dsh
279 170.602 mo
279 156.35 li
0 0 0 1 cmyk
@
279 118.737 mo
279 124.102 li
@
[] 0 dsh
276.508 170.602 mo
281.495 170.602 li
@
276.508 118.737 mo
281.495 118.737 li
@
274.013 156.35 mo
283.99 156.35 li
283.99 124.101 li
274.013 124.101 li
cp
.8 1 .2 0 cmyk
f
1 lj
249.071 114.576 mo
259.049 114.576 li
.746 .676 .668 .898 cmyk
@
1.5 lw
274.013 144.136 mo
283.99 144.136 li
0 0 0 0 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 100 19 <00010053ff6e00c2006f000c002dba000c000000032bb8000c10b8000010
b80007d0b800072fba00080000000c11123900b800082fb800002f303137
1533160e0207153e013d01533b01050e17113a346f6f0c1c1b1706321152
3965>ZDWBNI+HelveticaNeue AddT42Char 
1 2888 32 <00020022fff501fe02c5001f003300dfba002a001100032bb8002a10ba00
07002000032bb8000710b8001adc410500da002000ea002000025d411b00
090020001900200029002000390020004900200059002000690020007900
20008900200099002000a9002000b9002000c90020000d5d411b0006002a
0016002a0026002a0036002a0046002a0056002a0066002a0076002a0086
002a0096002a00a6002a00b6002a00c6002a000d5d410500d5002a00e500
2a00025db8000710b80035dc00ba001d000400032bb8001d10ba000c002f
00032bb8000c10ba0025001600032bb8002510b8000410b80000dc303137
231e0133323635342e0223220e0215141e0233323637170e012322260114
0e0223222e0235343e0233321e02865508765981752742583233563e221d
39543634581802044e4e334a010e142636211f3325150f21352624362513
ab5c5ac5b865834c1f223d553334583e23352d028b873801611f392b1919
2a361d213c2f1c1a2d3a0000>ZDWBNI+HelveticaNeue AddT42Char 
1 4464 58 <00010025fff0026302db0039008dba001e001f00032bb8001e10ba002900
1400032bb8002910b8001e10b8000bdc410500da001400ea001400025d41
1b0009001400190014002900140039001400490014005900140069001400
790014008900140099001400a9001400b9001400c90014000d5db80032dc
b8002910b8003bdc00ba0019002400032bb8001910ba0006003700032bb8
000610303101332e0323220e0215141e0615140e0223222e023523141e02
33323e0235342e0635343e0233321601eb5a0229475e37315d492c274152
5552412720344120284c39235a2f516b3c31635033274152555241271b2d
3a1e4a5f01f93b55381a19334f363141291913121d2e2527321d0c142a41
2d415f3d1e1733513935462e1b14111a2921232f1c0c45000000>ZDWBNI+HelveticaNeue AddT42Char 
1 4760 59 <000100020000023d02ca00070027ba0003000000032bb800031000b80001
2fba0006000700032bb8000610b8000710b80003d0303113113311333521
15f05feefdc5027afd86027a50500000>ZDWBNI+HelveticaNeue AddT42Char 
1 4836 61 <000100000000026502ca0007001900b800012fb800052fb800002fba0004
00000001111239303121132303230323130167fe63ce02cc66fb02cafd95
026bfd36>ZDWBNI+HelveticaNeue AddT42Char 
1 6940 81 <0002fff3ff3b009a02ca000300130037ba0004000e00032bb8000410b800
00d0b8000410b80002dcb80006d000ba000a001100032bb8000a10ba0001
000000032bb80001103031133523151311231114062b0122262715163332
369a555555141c120407051417394302626868fd5d0246fdc8281f010149
043f0000>ZDWBNI+HelveticaNeue AddT42Char 
1 7064 83 <000100450000009a02ca00030017ba0003000000032bb800031000b80001
2fb800002f303113113311455502cafd3602ca000000>ZDWBNI+HelveticaNeue AddT42Char 
1 7260 86 <00020024fff5021a02110013002700cbb800282fb800292fb8002810b800
14d0b800142fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8002910b8001edcb800
0adc410500da000a00ea000a00025d411b0009000a0019000a0029000a00
39000a0049000a0059000a0069000a0079000a0089000a0099000a00a900
0a00b9000a00c9000a000d5d00ba000f001900032bb8000f10ba00230005
00032bb8002310303113343e0233321e0215140e0223222e0227141e0233
323e0235342e0223220e027e192c3b21213b2c19192c3b21213b2c195a20
405e3d3e5d402020405d3e3d5e402001022f49321a1a32492f2f49311a1a
31492f39624929294962393963492a2a49630000>ZDWBNI+HelveticaNeue AddT42Char 
1 7976 90 <0001001ffff501d60211003a00abba0000000100032bba0020001f00032b
b8002010ba0031001f0020111239b800312f410500da003100ea00310002
5d411b000900310019003100290031003900310049003100590031006900
3100790031008900310099003100a9003100b9003100c90031000d5db800
0bdcb8000010b8002adcb80015dcb8000b10b8003cdc00ba003600060003
2bb8003610ba0025001a00032bb8002510b8000610b80000dcb8002510b8
001fdc303137231e0333323e0235342e02272e0335343e0233321e021733
2e0323220e0215141e0415140e0223222e02745502243c4e2b274f3f271d
2f3d201e3c301f142027131529221602550322394a2c22453723324b584b
3218252c141a312718a3304329120f263e2f2532211407070d131d161419
0f06091421192f3f250f1123382732381f11152221181f10060a1727>ZDWBNI+HelveticaNeue AddT42Char 
1 8304 91 <000100090000011d02a00017005bba0001000200032bb8000110b8000210
b80006d0b8000310b80007d0b8000210b80017dcb8000dd0b8000110b800
14d000b800012fba000f000c00032bb8000f10ba0004000500032bb80004
10b80000d0b8000510b80015d030311335231523153311141e023b013523
222e0235113335b65558580e1d2f21412714190e056702059b9b4bfeb724
2c18094b030a120f01414b000000>ZDWBNI+HelveticaNeue AddT42Char 
1 8628 93 <0001000e000001e602050007001900b800012fb800052fb800002fba0004
00000001111239303121132303230323130129bd598d02915fc00205fe51
01affdfb>ZDWBNI+HelveticaNeue AddT42Char 
1 8692 96 <00010008ff3201ec02050016002300b800012fb800052fb800122fba0004
00120001111239ba000e0012000111123930310513230323032313070e01
23222627151e0133323e02010be15a91029760cd230c201a0d190c0e1e0f
1d2a231d440249fe5901a7fdfe57171808044e05040f21340000>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/comma 19 def
/nine 32 def
/S 58 def
/T 59 def
/V 61 def
/j 81 def
/l 83 def
/o 86 def
/s 90 def
/t 91 def
/v 93 def
/y 96 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 44 /comma put
dup 57 /nine put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 106 /j put
dup 108 /l put
dup 111 /o put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C 10{/.notdef}rp /N 3{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /j /.notdef /l /.notdef /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 86{/.notdef}rp /endash 47{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [6.6494 0 0 -6.6494 0 0 ]msf241.086 233.427 mo(Shoji et al., 2009)[4.46837 3.83005 3.92319 1.58255 1.47618 1.84851 3.69708 2.09457 1.84854 3.73035 1.54929 1.84854 1.84854 1.84854 3.75024 3.93643 3.90985 0 ]xsh248.613 241.406 mo(SRA010798)[4.45506 4.86734 4.37527 3.66382 3.51089 3.67709 3.73032 3.85001 0 ]xsh175.995 233.427 mo(Vagin et al., 2009)[3.96964 3.70374 3.94313 1.60251 3.69707 1.84853 3.69708 2.09459 1.84853 3.73033 1.54932 1.84853 1.84854 1.84853 3.75026 3.93645 3.90985 0 ]xsh184.014 241.406 mo(SRA009947)[4.45506 4.86734 4.37527 3.93645 3.90985 3.88324 3.8367 3.51088 0 ]xsh110.758 233.427 mo(Aravin et al., 2008)[4.52156 2.37379 3.60399 3.44439 1.60251 3.69706 1.84854 3.69708 2.09457 1.84853 3.73035 1.5493 1.84853 1.84854 1.84854 3.75024 3.93645 3.8766 0 ]xsh119.947 241.406 mo(SRA008237)[4.45506 4.86735 4.37527 3.93645 3.87659 3.81676 3.75691 3.65051 0 ]xsh57.9548 233.427 mo(This study)[3.99632 3.81675 1.63576 3.3247 1.84853 3.46434 2.18102 3.85 4.08275 0 ]xsh.152 .348 1 .004 cmyk
%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 3968 55 <0002004e0000026202ca000800130089b800152fba0001000900032bb800
0110b8001510b80010dcb80005dc410500da000500ea000500025d411b00
090005001900050029000500390005004900050059000500690005007900
05008900050099000500a9000500b9000500c90005000d5db8000110b800
0bd000b8000a2fba0009000100032bb8000910ba0000000c00032bb80000
1030311311333216151406270111331133163635342623adba514b4b51fe
e75fda6c6f6f6c0174010643404044010156fd360124017064646f00>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/P 55 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C 10{/.notdef}rp /N /.notdef /P /.notdef /R /S /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /j /.notdef /l /.notdef /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 86{/.notdef}rp /endash 47{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [10.639 0 0 -10.639 0 0 ]msf106.343 35.4229 mo(Pre-pachytene)[6.81955 3.55334 5.94723 4.21312 6.34088 5.74509 5.75572 5.76633 5.65996 3.20236 5.81956 5.94719 0 ]xsh0 0 0 1 cmyk
ZDWBNI+HelveticaNeue*1 [10.639 0 0 -10.639 0 0 ]msf176.699 35.4229 mo(, )[2.95764 0 ]xsh.8 1 .2 0 cmyk
ZDWBNI+HelveticaNeue*1 [10.639 0 0 -10.639 0 0 ]msf182.614 35.4229 mo(Pachytene)[6.75571 5.74509 5.75574 5.76633 5.65996 3.20236 5.81955 5.9472 0 ]xsh0 0 0 1 cmyk
%ADOBeginSubsetFont: UZTAAA+HelveticaNeue-Italic Initial
ct_T42Dict begin
-0.992 -0.48 1.508 1.074
 256 array 0 1 255 {1 index exch /.notdef put} for  /UZTAAA+HelveticaNeue-Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f32d2d7d658000000cc000000606376
742004c300f30000012c0000001c6670676d372f229800000148000002c6
676c796662b76363000053d4000009c868656164e4113ff4000004100000
003668686561ab0fb6040000044800000024686d747829b4d7180000046c
000021606c6f6361004f800c000025cc000021646d6178700a76035e0000
4730000000206e616d656d11d7c50000475000000c0c7072657040d6ec83
0000535c0000007667646972000000000000000000000000000201bc0190
0005000000cc00cc0000011e00cc00cc0000011e003200fa000002000503
000000090004800000670000000000000000000000004c494e4f00010008
fb0203bdff29003803bd00d50000000000000000020502ca000000200002
00140014005000470055005f00000010ff3b000c0205000c02ca0011b800
002c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
00012c2020456944b001602db800022cb800012a212db800032c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db800042c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800052c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800062c2020456944b001
602020457d691844b001602db800072cb800062a2db800082c4b20b00326
5358b0801bb040598a8a20b003265358b0022621b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b80003265358b0032545b8014050
582321b8014023211bb003254523212321591b2159442db800092c4b5358
45441b2121592db8000a2c4bb800095058b101018e59b801ff85b800441d
b9000900035f5e2db8000b2c2020456944b001602db8000c2cb8000b2a21
2db8000d2c2046b003254652582359208a208a49648a204620686164b004
254620686164525823658a592f20b00053586920b000545821b040591b69
20b000545821b0406559593a2db8000e2c2046b00425465258238a592046
206a6164b0042546206a61645258238a592ffd2db8000f2c4b20b0032650
585158b080441bb04044591b21212045b0c05058b0c0441b2159592db800
102c2020456944b001602020457d691844b001602db800112cb800102a2d
b800122c4b20b003265358b0401bb000598a8a20b0032653582321b0808a
8a1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800132c4b535845441b2121592d00000001000000010000d208
d0275f0f3cf5011903e800000000b643f86800000000cb980451fc1ffe1f
05e704350002000900020001000000000001000003bdff2b001c05dcfc1f
fe6205e703e800d5000000000000000000000000085801f4003200000000
0116000001160000000000000116000001160000000000000103000001aa
0092022c0022022cfff2039e004f027600150116008e010300230103ff8c
0160004b025800300116fff10185001a0116000f014dffef022c0019022c
007c022cfffb022c0000022cfffd022c0007022c001d022c0061022c0016
022c00030116000f0116fff10258002e025800300258002e022c00560320
002a029bffca02ad000702d2002602c0000702630007023e000702f70026
02d20007010300070207fff8029b0007022c00070366000702d2000702f7
00260288000702f7002602ad00070288000a023e003c02d200230263004f
039e00500263ffd5026300420263ffdb0103ffe4014dffef0103ff810258
003201f4000000de004c0207fff70251fffc02190015025100110219000a
01280017023effeb022cfffc00defffc00deff8901e1fffc00defffc0354
fffc022cfffc023e00110251ffd002510011014dfffc01e1fff8013b0021
022c000f01e1002a02f7002901e1ffbf01e1ffc201bcffcc014d001e00de
004d014dffa602580045029bffca029bffca02d200260263000702d20007
02f7002602d200230207fff70207fff70207fff70207fff70207fff70207
fff7021900150219000a0219000a0219000a0219000a00defffc00defffc
00defffc00defffc022cfffc023e0011023e0011023e0011023e0011023e
0011022c000f022c000f022c000f022c000f022c003f0190004d022c001f
022cfffe022c000701f40048025800410219fffc032000180320001803de
004000de008900de003902580030039effb202f7fff502e8001102580030
025800170258001f022c003d022cffc9021600300240002902ee0057026e
002b01570000013700210158002b02f0fff90366fffc023effe3022cffee
0103ffe60258003002180000022cffee025800170288ffb801cf001e01cf
001b03e8002701160000029bffca029bffca02f700260432002a038b0011
01f4ffea03e8006b01aa005901aa00550116006f0116006b025800300258
005601e1ffc20263004200a7ff5b022cfffb0103001e0103001302070017
02070017022cffec011600430116ffe001aaffdd04320030029bffca0263
0007029bffca026300070263000701030007010300070103000701030007
02f7002602f700260316003302f7002602d2002302d2002302d2002300de
fffc00de001e00de001700de003500de003400de008900de005600deffd8
00de000d00deffe600de004102f0fff9022c0019022cffec00defffa0342
000e0342004f014d0061025800470288000700de004d02c000070342004f
02580030023e00110251ffd0014d000c014d000e0288000a026300420263
ffdb01e1fff801e1ffc201bcffcc0000ff6f0000ffac0000ff410000ff3a
0000ff580000ff570000ffac0000ff5c0000ff790000ff300000ff640000
fefb0000ff090000fea30000000000de003d00de005c02e10026032a0026
028b00110263ffdb01bcffcc022b0011026300070263000702ee003d0226
000802ce00260288000a01030007010300070207fff80449ffaa045d0006
02ee003d029b000702da00060263fff602c80006029bffca02a3000602ad
00070226000802d9ff9b0263000703f3ffae028a001202da000602da0006
029b000702bfffaa0366000702d2000602f7002602c800060288000702d2
0026023e003c0263fff6033e00200263ffd502d0000602920047041b0006
042b00060302003c03680006028d000902ce001603f20006029fffb60207
fff7023e001a0212fffc01a8fffe024dff9c0219000a02f8ffa801f4fffe
0236fffc0236fffc01f4fffc0233ffba02b0fffc0230fffc023e00110226
fffc0251ffd00219001501cf001601e1ffc20323001101e1ffbf0234fffc
020800290323fffc0339fffc024f001602c4fffc01fefffc0219fffe0306
fffc020cffc10219000a0219000a0236000601a8fffe0219001401e1fff8
00defffc00defffc00deff890359ffba0356fffc0236000601f4fffc0236
fffc01e1ffc20226fffc02c60014022c000f03a7fff802d9fff102f70026
023e0011029b004f01ff002a02c60032021d000f0226000801a8fffe0263
000901d7fffa03fdffae0302ffa8028a001201f4fffe02a5000701fefffc
029e0006021ffffc0313003c0245001602e30006023afffc03f8000602fe
fffc02d20026021900150263004201e100260263004201e1ffe8026dffd5
01eaffbf029f0047021200290292004702080029029b0006022cfffc0103
000703f3ffae02f8ffa8029bffca0207fff7029bffca0207fff7039effb2
0366fffc026300070219000a02e10026022b001103f3ffae02f8ffa8028a
001201f4fffe02da00060236fffc02da00060236fffc02f70026023e0011
02f70026023e00110263fff601e1ffc20263fff601e1ffc20263fff601e1
ffc202920047020800290372000602c4fffc040b0006029bffca0207fff7
02d2002602190015026300070219000a02d20007022cfffc0288000a01e1
fff80263ffdb01bcffcc0263ffdb01bcffcc0288ffbd0288ffbd0288ffbd
039effbd02d2002902d2002902d2002902c0001202c00012026300120263
0012026300120263001202f7002802f7002802f7002802f7002802d20012
02d20012010300160103001601030016010300160103ffc70207ffec029b
0012022c0012022c0012022c0012022c001202d2001102d2001102f80026
02f8002602f8002602f8ffeb02ad001202ad001202ad00120288000c0288
000e0288000c023e004c023e004c023e004c023e004c02d2003502d20035
02d2003502d2003502d2003502d20027039e0067039e0067039e0067039e
00670288005d0288005d0219fffc0219fffc0219fffc0366fffc02190011
021900110219001102510013025600130219001402190014021900140219
0014023effe8023effe8023effe8023effe8022c00040231000900de0009
00de000900de000900deffb100deff8d00deff8d020700090202000400de
00090120000900deffdb01560009022c0004022c000402970037023e0012
023e0012023e0012023effe6014d0001014d0001014dffd301f4fffd01f4
fffd01f4fffd013b002a013b0013013b0025013b000f022c0020022c0020
022c0020022c0020022c0020022c002002f6004202f6004202f6004202f6
004201f4ffd301f4ffd30302001601b6000902410027031f0027031f0027
00de007000de009b00de004200de006000de008d00de003200de005000de
003600de000e00de005500de007400de003900de00ae0116fff40116009c
018500280116004b00a7ff19034200400342004d0342001a034200380342
0044034200440288ffc0022cffdc01f4003702f80029022c000402d20011
02060027020600270185002803e8005a022c00600172005a017200470172
004b017200390172007b01720045017200510190005b00fa00570190004e
00be005c00be000e017200420172ffe10172001b0172ffc00172ffca0172
ffce0172ffd30172ffc1017200030172ffd30172ffd90190ffe300faffdf
0190ffd500beffe400beff97034200350320001700de006b00deffb10116
fff800f1009900f10095014c003e028fffc40116006d02f2004803610048
018a004803610048034a00480364004800ed00110288ffbd02ad00120228
0012026300120263ffda02d2001202f8002601030016029b00120265ffbd
0367001402d20011023affe902f8002602cb0012028800120262ffee023e
004c0288005d030900280263ffc3033b0059010300160288005d024b0014
01e5fff9022d000400ed0011020f0010024b00140234ffdc01d1003f022a
001001e5fff901b10007022d00040216001d00ed0011020200040206ffd0
01e4003f01a9000c023e0012023affd5020100120235001201c40024020f
001002cc000c01c1ff900296002c02cf000f00ed0011020f0010023e0012
020f001002cf000f00de006700de0079022cffdb022cffd90000fe3600d0
ff8a0116001a022c000e01f4fffa022c00310000ff0b0000fe880000fe92
0000fe9c0000fedd0000fedc0000fedc0000fef00000fea30000ff0d0000
feda0000feaa0000fe410000fe230000fdf10000fe5b0000fe0b0000fe2d
0000fe670000fe120000fdf40000fe040000fdec0000fddd0000fdf10000
fde20000fe300000fe430000fe340000fdca0000fedc0000fe700000fedc
0000fe920000fe9b0000fe34000000000116ffa5022c00190341001c014d
00060341001c014dffe7014d00060209fffb0209ffff00fb00100193ff9a
0116ffec0116fff501f4ffc902d2ffcc01f4ffce022c0078022c0076022c
002b01f4000e024bfffd024b001402d2001902d2001502370017029b0019
029b000401f4fff5023effe0035e003d02ba001702f300140104001d01af
001d011600230238000201f4fffd0096ffaf014d0080014d00be05620013
029b0038014300380219ffd6020b0080020b00be02a2008002a200be014d
001f01430078014d001f01620049008b0000000000000000000000000000
0000000000000000000000000000000001f4000003e80000011600000341
0000014d00000116000000a70000022c0000006900000116000000000000
000000000000000000000000002c0000000f0000014dff8801ae001d014d
001f014d004d0219001a02190039029bffd302630019022c001003790014
02a4fffb0000fef90000ff060000fe600000fe530000fea20000feac0000
feff0000feaa0000feb80000feb50000feb00000feab0000fe660000fed6
0000ff020000fed50000fe9e0000fdd80000fe3c0000fe070000fe1d0000
fdf00000fe080000fdf10000fea500a7004f0136004f0462006203f30062
029b001001160026022c00260341002603b10026029b007503b1007504c7
007505dc007503b10026029bffd903b1ffd904c7ffd9022c001002d20011
02d200150341000e00de000401bc0004029b000402d2000401f4003802d2
003803b00038048f003802d2000401f4ffc902d2ffc903b0ffc900de0007
01f4fffd022cfffa0341000404d3fffd0446ffeb03d6fffa03d5fff802c3
fffb0173ffef0459fffb0363fff802c0ffed029bffd3022cfffb01160026
01160020030a0014022cfffb02d2003d022c001702d2003d022c001702d2
003d022c001702d2003d022c001702d2003d022c0017029bffd3022cfffb
029bffd3022cfffb03e8ffcc0379fff6030a0017022cffd9029b001001f4
0002030a0014022cfffb030a0014022cfffb00deff8504c9ffed0463fffa
03e6fffa030a001702d20010022c0004029bffd3022cfffb029bffd3022c
fffb029b0019022c0001029b0019022c00010116002600defffc01160026
00de0009030a0014022cfffb030a0014022cfffb02d2001c014d000702d2
001c014d000702d2003d022c001702d2003d022c001702d20013022c0004
029bffd3022cfffb029b0019022c0001030a0014022cfffb030a0014022c
fffb030a0014022cfffb030a0014022cfffb029b007101f4ffd1014d004c
029bffd3022cfffb029b000e022cfffe029b000e022cfffe029b000e022c
fffe02d2001101f4fffa02d20015022cfffa02d20015022cfffa02d20015
022cfffa02d20015022cfffa02d20015022cfffa029b0019022c0001029b
0019022c0001029b0019022c0001029b0019022c0001029b0019022c0001
026300190116001a030a0017022cffd902d20013022c000402d20013022c
000402d20013022c000402d2ffb6022cffa702d20013022c00040116ff98
00deff720116002601160020029b001001f40002029b001001f40002029b
001001f40002022c001000deffed022c001000deffe6022c001000deff8a
022c001000deff7e0341000e034100040341000e034100040341000e0341
000402d20010022c000402d20010022c000402d20010022c000402d20010
022c0004030a0014022cfffb030a0014022cfffb030a0014022cfffb030a
0014022cfffb029b0019022cffd1029b0019022cffd102d2001c014d0007
02d2001c014dffe502d2001c014dffe602d2001c014dffbb029b000b01f4
fffa029b000b01f4fffa029b000b01f4fffa029b000b01f4fffa029b000b
01f4fffa0263005a011600210263005a0116fffb0263004d0116ff9e0263
00390116ff8d02d2003d022c001702d2003d022c001202d2003d022c000c
02d2003d022c001702d2003d022c0017029b007501f40038029b007501f4
003803b0006e02d2003c03b0006e02d2003c029bffd901f4ffc9029bffd9
01f4ffc9029b007101f4ffd10263ffdb01f4ffdd0263ffdb01f4ffdd0263
ffdb01f4ffdd022c00040116002102d2003c01f4ffd10116001a029bffd3
022cfffb029bffd3022cfffb029bffd3022cfffb029bffd3022cfffb029b
ffd3022cfffb029bffd3022cfffb029bffd3022cfffb029bffd3022cfffb
029bffd3022cfffb029bffd3022cfffb029bffd3022cfffb029bffd3022c
fffb029b0019022c0001029b0019022c0001029b0019022c0001029b0019
022c0001029b0019022c0001029b0019022c0001029b0019022c0001029b
0019022c000101160026011600200116000400deffe6030a0014022cfffb
030a0014022cfffb030a0014022cfffb030a0014022cfffb030a0014022c
fffb030a0014022cfffb030a0014022cfffb0379001402a4fffb03790014
02a4fffb0379001402a4fffb0379001402a4fffb0379001402a4fffb02d2
003d022c001702d2003d022c0017035e003d02ba0017035e003d02ba0017
035e003d02ba0017035e003d02ba0017035e003d02ba0017029b007101f4
ffd1029b007101f4ffd1029b007101f4ffd102de002601fdfff9010b003b
010b00470000fe300116fff000b2006d00b2006d0000fee70000fec900b2
007d015d0050015200500179006d0180007d010b006c010b00440186006d
01a700820190007d01a7008203000023030affdc022c0038034200780342
0038022cff8302d2ff91022c00040341000401ec00100223002201c80010
02170008030a0014014dffab03ccffd903cc00470000fceb0000fd4d0000
fd700000fd5f0000fcb902ef002b022c00110318001502350007022cffd6
022cfffb025b0004025ffffa022cfffe0250fffa025dffd9022c0004025d
0004010bffe803b0000001b90006014dffe8025bfff9024e004502860045
03a3fffa02a000210210fffe02d6001a02530007024e000700d0008400d0
009100de008d00bf0076014d009f014d007b00bfffd0014dffa8014dfff9
014dffd500d0003100d0003e014dffc8014d002d0116002f0116002f006f
fff000a7003100a7003000dd00300169004b00fa00160116006a01160069
0124002d012400150124001e0124005b014d001b0124fff00124ffda0124
000700fa002a00fa0012006f003001240033011600430124ffde0124ffa2
0124ffb20124ff9a014dffe3011600690000fe0b0000fe060000fdee0000
fe500000fe580000fdd40000fe7a0000fd6f0000fe6a0000fdd40000feb1
0000feaf0000feb800000000011600000000000000000000000000000185
000a0185000a0358008003ccffb7011600290458007803ccffd90379008d
036cfff20116ffd80116ffdb000000000000000000000000000000000000
000000000000032a0000030a0028022c0096022c0010029bffd902ee003a
0395006203cd00420342004402d2001c029b0081026400930337ffb3029b
0019022cfffe029b002f022c001d0263ff99030a001402540013011affd5
01aa003802d2000a015500170193ff9a022c0061022c006c00deffd900de
0033022cffd90263000f0263000f0263000f0263000f0263000f0263000f
0263000f0263000f02cffff002c8fff003a0006d03a5007d03a5006d03b0
007d03ce008203b90082022c0013022c0013022c0013022c0013022c0013
022c0013034d006d034d007d0421006d042b007d0414006d041b007d0263
001e0263001e0263001e0263001e0263001e0263001e0263001e0263001e
0384006d0384007d0458006d0462007d044c006d0452007d047900820479
00820116002a0116002a0116002a0116002a0116002a0116002a0116002a
0116002a01c8006d01c8007d029b006d02a6007d028f006d0296007d02bd
008202bd0082026300190263001902630019026300190263001902630019
03bc006d03bc007d048f006d049a007d0483006d048a007d0263001c0263
001c0263001c0263001c0263001c0263001c0263001c0263001c034d007d
042b007d041b007d0442008202f6001502f6001502f6001502f6001502f6
001502f6001502f6001502f6001503b2006d03b2007d0486006d0490007d
047a006d0480007d04a7008204a700820263000f0263000f022c0013022c
00130263001e0263001e0116002a0116002a02630019026300190263001c
0263001c02f6001502f600150263000f0263000f0263000f0263000f0263
000f0263000f0263000f0263000f03f0fff003eefff004ac006d04ce007d
04a3006d04b1007d04cc008204ca00820263ffe40263ffe40263ffe40263
ffe40263ffe40263ffe40263ffe40263ffe4049a006d049a007d056e006d
0578007d0561006d0568007d058f0082058f008202f6001502f6001502f6
001502f6001502f6001502f6001502f6001502f6001504c8006d04c8007d
059c006d05a6007d058f006d0596007d05bd008205bd00820263000f0263
000f0263000f0263000f0263000f0263000f0263000f029bffd1029bffd1
03200049031d004403beffd10263ffe40263ffe40263ffe40263001e0263
ffe40342006c034000440355006c034900440400001a0116002a01160029
011600250116002a0116002a0116002a0116001f0116001f0198006c019a
00440263001c0263001c0263001c0263001c0263ffed0263ffed0263001c
0263001c029b006e029b006e0344006c03740044034d007d02f6001502f6
001502f6001502f6001502f600150397006c03ae004403b2006c03be0044
0423fff2024800040266002a026d0070017100180155002802d20011030a
001400de0027029b001902d200130000fe5b0299fff7022cfffa03a3000b
0386fffe0342003b0342003b0342004003f9002a02df00070340003a02d2
0020029bffd301f4ffc903b6002a02d60007025e0020015d001702db000f
02b3003202d2ffff022cfffb0186ffc4025e001301ea0013031200130259
0004029b001001f400020263ffdb01f4ffdd026d006301fd0040025e0020
01b4000b038e002e02b90012038e002e02b9001203a3007102c8003f02de
00180235000b022cfffb029800230298fff60412ffe502deffd7029b0075
024d003801f400000298001301f9fff302e7ffd80240ffd50116002002a6
ffda01fdffd6029bffdd029bffd302d2001101f4fffd022c000002630028
00deffef0155002802630046029b0019022c0078022c0050029b0019022c
0001021effe300deff8502d2001700d0001100d0ffd2014d001a014d0038
014d003b014dffb90116005d014dffdf014dffdf02af0020024800040248
0012011600330248001602ae00180248003e0116003301160033030a0022
01fd000301fdfff6029b0019022cffd402d200110341000e02ddffe402bd
ffcb02d2001c02d2001102d2001c01f4000001f4fffd01f40000022c0020
02d4ffff034f0028030d001c0186fff50304003d0266000f0236ffe6014d
007f014d00b1014d0021014d00210134ffe10134ffe1019c004d019cffc4
019c002a019c0008019cffe60236ffe401f000420222ffed020e0004020e
00040176003a019e00040339001d0318fff40285001b0000fc1f035c0001
0266fff300ea004700ef004700aa003400aa005600c8003700c7003b0175
005f0179005f012c0024012400240124005f015c004700e6005900e6002b
03ddffe004a2ffce047dffb2047dffab009affe9021e000202b4000b02b4
005b0251ffcc0214ffd200e6fffb00e6ffcd01f3000101f3fff101f6ffdc
01ad000b0226fffd0000fd7d0000fdf50000fdb80000fe830000fe740000
fcea0000fe150000ff940000fdf80000fddd0000fcca0000feb50225fff0
0225fff601f4ffc501f4ffcd03a5ffea0219fff301e9ffca027effdd0317
ffff0256ffd401f6ffd402e1fffa02e1fffa02e1fffa03e8fffe03e8fffa
03e8015f03e8014b03e8015f03e8014b03e8fffd03e8fff903e801d703e8
01bf03e8fffd03e8fff903e8ff86006f00370116ff970116ff9b0116ff98
00faff7f0116ffa202d20011030a001702d20011022b0023029900300263
0026029bffd3025a001002d0ffea025effea02d2ffe00341000402d70022
031f001203fe001c0299004c0299000e01c3fff501b5ffd501c3005001b5
003001c3004701b6001f01c3ffed01b6ffc4016dffed0169ffed0169ffed
0169ffed016dffed016d004d0169002a0169000a0169ffeb016dffcf01a7
ffed01a7ffed01a7ffed01a7ffed01a7ffed0138002a018e002901ce002b
01d6002b0276001b033a002401bd00020000fe6e0000fe970000fe620000
fe840000fe810000fe680000fe640000fe490000fe300225fff601f4ffcd
04fe00140420fffb020e0004020e0004020e0022018b0034018b005b01a1
003602770030018b0036018b0034018b0039018b00430172003401720046
018b001d009e003b01630039024f003b018b003b018b003501630034018b
0046018b0035018b001700c5004f018b004801af002f024f004d01630060
01b2002d018b005701b20046025ffff3030600070251ffcb022c0015022c
fffb0264fffe02620003026e000103a1000b018bfff6009effaa00ecffab
018bffb70163ffce01b2ff9c018bffc501b2ff99018bff650209001502d1
ffcc00de00040222ffed0370ffda0351fff3025c0047026effec0163fff7
0266ffb1018efff80164fff70165fff800de008d014d0061028f00340256
ffc6017f006c02aa000e04460009022c000901670046022cffe3022cfff4
022c0001022cfffc022c0005020b003d022cfff7022c000201db004f01db
ffc801dbffc8018effdf02ac0038030e0023023fffdf029fffe70311ffca
0209ffd40282ffe403f3000e0296ffdf03adffef01e5ffdf025fffe2045f
fff303e6004402a7000a0281ffd50307001603c6ffe00229002503790006
036900150377ffdf0296002802f7ffef03230015023f003f0323002803e7
fff002c5ffd80261ffdf029400240357001502beffd604e7001303630040
03ef0014045b0028022d0000034e0074047700020267000b02b1ffdf0225
002202b7003402ceffe80209007203e200590261fff202e4003c0332ffe9
0332ffe90311005e0231ffe8037f001302f9ffe7028bffdf028bffdf02e1
001402c70015039a0023025dffe802e5001503750041030bffd8030dffdf
02b0000303490014036b0028049bfff3032300150397003f026500080265
002404e3000f02d2ffec0359ffd202c5ffd8035a00280293ffe50315ffe8
02ceffe802b3004102eafff8040000150288ffbe02d20035029bffd3015e
004f0208002c01f700140250002b027c002e0406001f0246ffd80256fff2
03010076040a0030028d0030023ffffe04c7001a0250002a0262004103a8
00300251001b025affed036e00300229003b033e0017039e003e034b003e
0256fffd0371001a0239fff00266003b023800180276001b0252001f024a
00780280fff002410038034affe80206001602e40041028d00020256ffff
022cfff1025c001c03a8002b022900460000000000000088000000880000
008800000088000000880000008800000088000000880000008800000088
000000880000008800000088000000880000008800000088000000880000
0088000000880000008800000088000000880000008800000088000000dc
000000dc000000dc000000dc000000dc0000027400000274000002740000
03cc000003cc000003cc000003cc000003cc000003cc000003cc000003cc
000003cc000003cc000003cc000003cc000003cc000003cc000003cc0000
03cc000003cc000003cc000003cc000003cc000004440000044400000444
0000044400000444000004440000059c000005e0000005e0000005e00000
05e0000005e0000005e0000005e0000005e0000005e0000005e0000005e0
000005e0000005e0000005e0000005e0000005e0000006d4000006d40000
06d4000006d4000006d40000071000000710000007100000073800000738
00000738000008740000096c0000096c000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c8000009c8000009c8000009c8000009c8
000009c8000009c8000009c8000009c8000009c8000009c8000009c80000
09c8000009c8000009c8000009c800010000085800960009000000000002
0000000000140000020002c6000000000000002501c20001000000000000
021200000001000000000001000e02120001000000000002000602200001
000000000003002a02260001000000000004001502500001000000000005
0007026500010000000000060014026c000100000000000700e402800001
00000000000a01330364000100000000000b001f0497000100000000000c
001f04b60001000000000100001804d50001000000000101000c04ed0001
000000000102000904f90001000000000103001005020001000000000104
001505120001000000000105001505270001000000000106000d053c0001
0000000001070014054900030001040400020004055d0003000104060002
000c05610003000104070002000c056d0003000104090000042405790003
000104090002000c099d00030001040b0002001009a900030001040c0002
001009b90003000104100002000e09c90003000104110002000a09d70003
000104120002000809e10003000104130002000e09e90003000104140002
000c09f70003000104160002000e0a03000300010419000200120a110003
0001041d0002000c0a23000300010804000200040a2f000300010c010002
00080a33000300010c0a0002000e0a3b436f707972696768742028632920
313938312c20313938322c20313938332c203139383920616e6420313939
332c204c696e6f74797065204c69627261727920476d6248206f72206974
7320616666696c6961746564204c696e6f747970652d48656c6c20636f6d
70616e6965732e20416c6c207269676874732072657365727665642e0a0a
546865206469676974616c6c7920656e636f646564206d616368696e6520
7265616461626c6520736f66747761726520666f722070726f647563696e
672074686520547970656661636573206c6963656e73656420746f20796f
75206973206e6f77207468652070726f7065727479206f66204865696465
6c62657267657220447275636b6d61736368696e656e20414720616e6420
697473206c6963656e736f72732c20616e64206d6179206e6f7420626520
726570726f64756365642c20757365642c20646973706c617965642c206d
6f6469666965642c20646973636c6f736564206f72207472616e73666572
72656420776974686f757420746865206578707265737320777269747465
6e20617070726f76616c206f662048656964656c62657267657220447275
636b6d61736368696e656e2041472e0a0a436f7079726967687420286329
20313938382c20313939302c20313939332041646f62652053797374656d
7320496e636f72706f72617465642e20416c6c2052696768747320526573
65727665642e48656c766574696361204e6575654974616c696348656c76
6574696361204e657565204974616c69633b20382e30643665313b203230
31322d30332d323748656c766574696361204e657565204974616c696338
2e306436653148656c7665746963614e6575652d4974616c69632248656c
766574696361204e6575652220697320612074726164656d61726b206f66
2048656964656c62657267657220447275636b6d61736368696e656e2041
472c207768696368206d6179206265207265676973746572656420696e20
6365727461696e206a7572697364696374696f6e732c206578636c757369
766c79206c6963656e736564207468726f756768204c696e6f7479706520
4c69627261727920476d62482c20612077686f6c6c79206f776e65642073
756273696469617279206f662048656964656c6265726765722044727563
6b6d61736368696e656e2041472e48656c76657469636120284c6174696e
20666f72205377697373292068617320746865206f626a65637469766520
616e642066756e6374696f6e616c207374796c6520776869636820776173
206173736f6369617465642077697468205377697373207479706f677261
70687920696e2074686520313935307320616e642031393630732e204974
206973207065726665637420666f7220696e7465726e6174696f6e616c20
636f72726573706f6e64656e63653a206e6f206f726e616d656e742c206e
6f20656d6f74696f6e2c206a75737420636c6561722070726573656e7461
74696f6e206f6620696e666f726d6174696f6e2e2048656c766574696361
206973207374696c6c206f6e65206f662074686520626573742073656c6c
696e672073616e732d736572696620666f6e74732e687474703a2f2f7777
772e4c696e6f747970654c6962726172792e636f6d2f687474703a2f2f77
77772e4c696e6f747970654c6962726172792e636f6d2f416c6c20547970
6f67726170686963204665617475726573416c6c2046656174757265734c
6967617475726573436f6d6d6f6e204c6967617475726573556e69636f64
65206465636f6d706f736974696f6e43616e6f6e6963616c20636f6d706f
736974696f6e536d617274205377617368657341726368616963204c6f6e
672073205377617368659c9ad4004b00750072007300690076004b007500
720073006900760043006f00700079007200690067006800740020002800
63002900200031003900380031002c00200031003900380032002c002000
31003900380033002c0020003100390038003900200061006e0064002000
31003900390033002c0020004c0069006e006f0074007900700065002000
4c00690062007200610072007900200047006d006200480020006f007200
2000690074007300200061006600660069006c0069006100740065006400
20004c0069006e006f0074007900700065002d00480065006c006c002000
63006f006d00700061006e006900650073002e00200041006c006c002000
720069006700680074007300200072006500730065007200760065006400
2e000a000a0054006800650020006400690067006900740061006c006c00
7900200065006e0063006f0064006500640020006d006100630068006900
6e00650020007200650061006400610062006c006500200073006f006600
74007700610072006500200066006f0072002000700072006f0064007500
630069006e00670020007400680065002000540079007000650066006100
63006500730020006c006900630065006e00730065006400200074006f00
200079006f00750020006900730020006e006f0077002000740068006500
2000700072006f007000650072007400790020006f006600200048006500
6900640065006c0062006500720067006500720020004400720075006300
6b006d00610073006300680069006e0065006e0020004100470020006100
6e006400200069007400730020006c006900630065006e0073006f007200
73002c00200061006e00640020006d006100790020006e006f0074002000
62006500200072006500700072006f00640075006300650064002c002000
75007300650064002c00200064006900730070006c006100790065006400
2c0020006d006f006400690066006900650064002c002000640069007300
63006c006f0073006500640020006f00720020007400720061006e007300
660065007200720065006400200077006900740068006f00750074002000
740068006500200065007800700072006500730073002000770072006900
7400740065006e00200061007000700072006f00760061006c0020006f00
66002000480065006900640065006c006200650072006700650072002000
44007200750063006b006d00610073006300680069006e0065006e002000
410047002e000a000a0043006f0070007900720069006700680074002000
280063002900200031003900380038002c00200031003900390030002c00
200031003900390033002000410064006f00620065002000530079007300
740065006d007300200049006e0063006f00720070006f00720061007400
650064002e00200041006c006c0020005200690067006800740073002000
520065007300650072007600650064002e004900740061006c0069006300
4b0075007200730069006900760069004900740061006c00690071007500
650043006f0072007300690076006f30a430bf30ea30c330afc774d0e4b9
adccb40043007500720073006900650066004b0075007200730069007600
49007400e1006c00690063006f041a04430440044104380432043d044b04
39004b00750072007300690076659c4f5306450627062606440043007500
72007300690076006100b8000a2b00ba00020001000c2b01ba0003000300
0c2b01bf000400410035002a001e0012000000122bbf0005003a00300025
001b0010000000122b00bf000200450039002c00200013000000122bbf00
03004e0040003200240016000000122b00ba0006000400112bb800012045
7d691844b800002b000000>
[2505 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 136 24 <0001007c000001b102c5000c002100b800012fb800002fba000700080003
2bb8000710ba000b0008000711123930312113230e03230732363703011a
974210333e43210e3156307302c51e2e1f0f44090bfde500>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 220 29 <0002001dfff5022102c50026003600fdba002f000c00032bb8002f10ba00
16002700032bb8001610410500da002700ea002700025d411b0009002700
190027002900270039002700490027005900270069002700790027008900
270099002700a9002700b9002700c90027000d5dba000000270016111239
b800002fb80001dcba001f000c0001111239411b0006002f0016002f0026
002f0036002f0046002f0056002f0066002f0076002f0086002f0096002f
00a6002f00b6002f00c6002f000d5d410500d5002f00e5002f00025db800
38dc00ba002c001100032bb8002c10ba0004002400032bb8000410ba001b
003400032bb8001b10b8000410b80000dcba001f0034001b111239303101
332e01232206070e0315141e0233323e0235342e0223220607233e033332
1603140e0223222635343e0233321601c75a026058697f260e1610081934
51373b5d42231d354a2c2d5519020b1e2f453239343113273a2743401428
3a263f43020d576166591f484c4d2333583f2427465f372c4b3920222527
584a3037feb12341331e503f243f301c4c00>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 628 32 <00020003fff5020702c50028003800b7ba0000000100032bba000e003400
032bb8000e10ba001800010000111239b800182fba00210001000e111239
b8002cdc410500da003400ea003400025d411b0009003400190034002900
340039003400490034005900340069003400790034008900340099003400
a9003400b9003400c90034000d5db8000e10b8003adc00ba002600060003
2bb8002610ba0013003100032bb8001310ba0029001d00032bb8002910b8
000610b80000dcba0021001d002911123930313723061e0233323e02373e
0135342e0223220e0215141e0233323637170e0323222637222635343e02
33321615140e025e5a011b33492c35503e2f141c1f1a365238385b41231d
35492c2d5619020c203146333631b4404213253725454414273aa92e442d
151b32482e40994635583f2229485f362b4c38212125022756482f37c44c
3d204135214f422340301c000000>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 972 52 <000100070000036702ca000f003500b800012fb800052fb800092fb80000
2fb8000b2fba000400010000111239ba000800010000111239ba000e0001
00001112393031130333133313330133033313230123039d965b7d025d5b
016c02925b9784fe9f025f02cafd360271fd8f0271fd8f02cafd9a026600
>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 1092 58 <0001000afff0026802db003f00a5ba0020002100032bb8002010ba002b00
1600032bb8002b10410500da001600ea001600025d411b00090016001900
160029001600390016004900160059001600690016007900160089001600
99001600a9001600b9001600c90016000d5dba00000016002b111239b800
002fb80001dcba000b00210020111239b8000b2fb80036dcb8000110b800
41dc00ba001b002600032bb8001b10ba0006003b00032bb8000610303101
33362e0223220e0215141e021f011e0315140e0223222e023723061e0233
323e0235342e022f012e0335343e0233321e0202075f0229485f35305d49
2e1a2c3a20611a2e23141f3241212b48331a025f05274b6c40306350331d
303e2160182b1f1220313a1a253e2b1701f73c56371b1a344d34283b2b1d
091a07121b271b2434211011284230425f3c1d1a35513830422b1b091a07
121b251a202c1c0d0e2339000000>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 1436 59 <0001003c0000028d02ca0007001b00b800052fba0001000000032bb80001
10b8000010b80003d030310137210733033313027b12fdc011f0865f8602
7a5050fd86027a00>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 1504 75 <00020011fff5025e02ca001800280079ba0019000e00032bb8001910411b
000600190016001900260019003600190046001900560019006600190076
0019008600190096001900a6001900b6001900c60019000d5d410500d500
1900e5001900025d00b800012fba0026001300032bb8002610ba0009001e
00032bb8000910b8002610b80018dc303121132303232e0323220e021514
1e0233323637330725343e0233321615140e0223222601c7975437020822
2d3218446b49271a344c313451260212feef1a344c333f431b334c30463f
02cafeec1a2315093b5e753b2f4e371f23324ac82b5a4a2f4c3a285b4c32
4a000000>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 1748 80 <0002fffc000000e602ca00030007001300b800052fba0001000000032bb8
00011030311337230f01033313d0165616136b546c026268685dfdfb0205
>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 1808 83 <0001fffc000000e602ca0003000b00b800012fb800002f30311303331391
95549602cafd3602ca00>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 1848 86 <00020011fff5020902110011002300d3b800242fb800252fb8002410b800
00d0b800002fb8002510b8000adcb8000010b80012dc411b000600120016
001200260012003600120046001200560012006600120076001200860012
0096001200a6001200b6001200c60012000d5d410500d5001200e5001200
025db8000a10b8001cdc410500da001c00ea001c00025d411b0009001c00
19001c0029001c0039001c0049001c0059001c0069001c0079001c008900
1c0099001c00a9001c00b9001c00c9001c000d5d00ba0021000500032bb8
002110ba000d001700032bb8000d10303137141e0233323e023534262322
0e0217343e0233321e0215140e02232226111e385133446a4a266e69446b
4b275519324a31233322101931472f4648cc2f4f3920365b763f696d365a
763e285849301727361e265649304e00>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 2164 87 <0002ffd0ff3b021c021100180028007dba000e001900032bb8000e104105
00da001900ea001900025d411b0009001900190019002900190039001900
490019005900190069001900790019008900190099001900a9001900b900
1900c90019000d5db8002adc00b800012fba0013002600032bb8001310ba
001e000900032bb8001e10b8002610b80018dc303113033313331e033332
3e0235342e0223220607233705140e0223222635343e0233321666965337
0207232d3317446b49271a344b32345126021201111a344c333f431b334c
30463f0205fd3601141a2315083a5e753b2f4e381f24324ac82b5a4a2f4c
3a295a4c324a0000>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 2412 89 <0001fffc0000017a02130018000700b800012f3031130333373e01373e01
373e013b013217372606232206072337676b54310614111437230f14100c
090414080e08415d1e02190205fdfbe51d43191f2c090401015b02024635
6f00>UZTAAA+HelveticaNeue-Italic AddT42Char 
1 0 0 <00020032000001ce02c800030007005bb8000a2bb800082fb800092fb800
04dcb80000dcb8000810b80006d0b800062fb80002dc00b800014558b800
042f1bb90004000c3e59b800014558b800052f1bb9000500063e59b80004
10b80000dcb8000510b900020003f43031012111211311211101affea201
5e1ffe6402a6fd7f02a3fd3802c80000>UZTAAA+HelveticaNeue-Italic AddT42Char 
UZTAAA+HelveticaNeue-Italic /CharStrings get begin
/one 24 def
/six 29 def
/nine 32 def
/M 52 def
/S 58 def
/T 59 def
/d 75 def
/i 80 def
/l 83 def
/o 86 def
/p 87 def
/r 89 def
end
UZTAAA+HelveticaNeue-Italic /Encoding get
dup 49 /one put
dup 54 /six put
dup 57 /nine put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 100 /d put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
pop
end
%ADOEndSubsetFont
/ZDWBNJ+HelveticaNeue-Italic /UZTAAA+HelveticaNeue-Italic findfont ct_VMDictPut/ZDWBNJ+HelveticaNeue-Italic*1 [49{/.notdef}rp /one 4{/.notdef}rp /six 2{/.notdef}rp /nine 19{/.notdef}rp /M 5{/.notdef}rp /S /T 15{/.notdef}rp /d 4{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp /o /p /.notdef /r 141{/.notdef}rp]ZDWBNJ+HelveticaNeue-Italic nfZDWBNJ+HelveticaNeue-Italic*1 [10.639 0 0 -10.639 0 0 ]msf58.9567 58.3925 mo(Spo11)[6.97913 6.36214 5.35147 4.86202 0 ]xsh252.704 58.3925 mo(Tdrd9)[5.29828 6.39407 3.62781 6.40469 0 ]xsh188.401 58.3925 mo(Tdrd6)[5.29828 6.39406 3.62782 6.4579 0 ]xsh129.663 58.3925 mo(Mili)[9.33035 2.41505 2.41505 0 ]xsh%ADOBeginSubsetFont: KEGQMX+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZDWBNI+HelveticaNeue gcheck setglobal} if
1 3576 48 <00010052000000b102ca00030017ba0003000000032bb800031000b80001
2fb800002f303113113311525f02cafd3602ca000000>ZDWBNI+HelveticaNeue AddT42Char 
1 3628 51 <0001004e0000022702ca0005001fba0005000000032bb800051000b80000
2fba0004000100032bb800041030311311213521114e01d9fe8602cafd36
50027a00>ZDWBNI+HelveticaNeue AddT42Char 
1 3692 52 <000100500000031702ca000e0057ba0003000000032bb8000310ba000b00
0800032bb8000b10ba000d0000000b11123900b800012fb800052fb80009
2fb800002fb8000b2fba000400010000111239ba000800010000111239ba
000d000100001112393031131133113313331333113311230b01505a02df
51df025a82e2e102cafd360252fdae0252fdae02cafda80258000000>ZDWBNI+HelveticaNeue AddT42Char 
ZDWBNI+HelveticaNeue /CharStrings get begin
/I 48 def
/L 51 def
/M 52 def
end
ZDWBNI+HelveticaNeue /Encoding get
dup 73 /I put
dup 76 /L put
dup 77 /M put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZDWBNI+HelveticaNeue*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L /M /N /.notdef /P /.notdef /R /S /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /j /.notdef /l /.notdef /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 86{/.notdef}rp /endash 47{/.notdef}rp]ZDWBNI+HelveticaNeue nfZDWBNI+HelveticaNeue*1 [7.9792 0 0 -7.9792 0 0 ]msf253.125 67.8008 mo(MILI I.P.)[7.02969 2.15439 4.52423 2.06662 2.21823 2.13046 2.298 4.3566 0 ]xsh56.24 109.15 mo
66.217 109.15 li
66.217 107.815 li
56.24 107.815 li
cp
.152 .348 1 .004 cmyk
f
.75 lw
0 lj
[2 2 ] 0 dsh
61.2305 111.148 mo
61.2305 109.15 li
0 0 0 1 cmyk
@
61.2305 106.335 mo
61.2305 107.815 li
@
[] 0 dsh
58.7358 111.148 mo
63.7218 111.148 li
@
58.7358 106.335 mo
63.7218 106.335 li
@
81.182 125.049 mo
91.159 125.049 li
91.159 116.972 li
81.182 116.972 li
cp
0 0 0 0 cmyk
f
[2 2 ] 0 dsh
86.168 133.89 mo
86.168 125.049 li
0 0 0 1 cmyk
@
86.168 112.335 mo
86.168 116.973 li
@
[] 0 dsh
83.6768 133.89 mo
88.6638 133.89 li
@
83.6768 112.335 mo
88.6638 112.335 li
@
81.182 125.049 mo
91.159 125.049 li
91.159 116.972 li
81.182 116.972 li
cp
.8 1 .2 0 cmyk
f
56.2402 108.396 mo
66.2172 108.396 li
0 0 0 1 cmyk
@
1.5 lw
1 lj
81.1816 120.506 mo
91.1586 120.506 li
0 0 0 0 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ZDWBNJ+HelveticaNeue-Italic*1 uf/ZDWBNJ+HelveticaNeue-Italic uf/UZTAAA+HelveticaNeue-Italic uf/ZDWBNI+HelveticaNeue*1 uf/ZDWBNI+HelveticaNeue uf/KEGQMX+HelveticaNeue uf/ZDWBNH+Palatino-Roman*1 uf/ZDWBNH+Palatino-Roman uf/TKWPMX+Palatino-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
